[{"name":"CONCAT","description":"io.github.subjekt.compiler.expressions.ir.BinaryOperator.CONCAT","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-binary-operator/-c-o-n-c-a-t/index.html","searchKeys":["CONCAT","CONCAT","io.github.subjekt.compiler.expressions.ir.BinaryOperator.CONCAT"]},{"name":"DIVIDE","description":"io.github.subjekt.compiler.expressions.ir.BinaryOperator.DIVIDE","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-binary-operator/-d-i-v-i-d-e/index.html","searchKeys":["DIVIDE","DIVIDE","io.github.subjekt.compiler.expressions.ir.BinaryOperator.DIVIDE"]},{"name":"ERROR","description":"io.github.subjekt.utils.MessageCollector.MessageType.ERROR","location":"subjekt/io.github.subjekt.utils/-message-collector/-message-type/-e-r-r-o-r/index.html","searchKeys":["ERROR","ERROR","io.github.subjekt.utils.MessageCollector.MessageType.ERROR"]},{"name":"FLOAT","description":"io.github.subjekt.compiler.expressions.ir.IrNativeType.FLOAT","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-native-type/-f-l-o-a-t/index.html","searchKeys":["FLOAT","FLOAT","io.github.subjekt.compiler.expressions.ir.IrNativeType.FLOAT"]},{"name":"FLOAT","description":"io.github.subjekt.compiler.expressions.ir.Type.FLOAT","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-type/-f-l-o-a-t/index.html","searchKeys":["FLOAT","FLOAT","io.github.subjekt.compiler.expressions.ir.Type.FLOAT"]},{"name":"INFO","description":"io.github.subjekt.utils.MessageCollector.MessageType.INFO","location":"subjekt/io.github.subjekt.utils/-message-collector/-message-type/-i-n-f-o/index.html","searchKeys":["INFO","INFO","io.github.subjekt.utils.MessageCollector.MessageType.INFO"]},{"name":"INTEGER","description":"io.github.subjekt.compiler.expressions.ir.IrNativeType.INTEGER","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-native-type/-i-n-t-e-g-e-r/index.html","searchKeys":["INTEGER","INTEGER","io.github.subjekt.compiler.expressions.ir.IrNativeType.INTEGER"]},{"name":"INTEGER","description":"io.github.subjekt.compiler.expressions.ir.Type.INTEGER","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-type/-i-n-t-e-g-e-r/index.html","searchKeys":["INTEGER","INTEGER","io.github.subjekt.compiler.expressions.ir.Type.INTEGER"]},{"name":"MINUS","description":"io.github.subjekt.compiler.expressions.ir.BinaryOperator.MINUS","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-binary-operator/-m-i-n-u-s/index.html","searchKeys":["MINUS","MINUS","io.github.subjekt.compiler.expressions.ir.BinaryOperator.MINUS"]},{"name":"MINUS","description":"io.github.subjekt.compiler.expressions.ir.UnaryOperator.MINUS","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-unary-operator/-m-i-n-u-s/index.html","searchKeys":["MINUS","MINUS","io.github.subjekt.compiler.expressions.ir.UnaryOperator.MINUS"]},{"name":"MODULO","description":"io.github.subjekt.compiler.expressions.ir.BinaryOperator.MODULO","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-binary-operator/-m-o-d-u-l-o/index.html","searchKeys":["MODULO","MODULO","io.github.subjekt.compiler.expressions.ir.BinaryOperator.MODULO"]},{"name":"MULTIPLY","description":"io.github.subjekt.compiler.expressions.ir.BinaryOperator.MULTIPLY","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-binary-operator/-m-u-l-t-i-p-l-y/index.html","searchKeys":["MULTIPLY","MULTIPLY","io.github.subjekt.compiler.expressions.ir.BinaryOperator.MULTIPLY"]},{"name":"NUMBER","description":"io.github.subjekt.compiler.expressions.ir.Type.NUMBER","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-type/-n-u-m-b-e-r/index.html","searchKeys":["NUMBER","NUMBER","io.github.subjekt.compiler.expressions.ir.Type.NUMBER"]},{"name":"PLUS","description":"io.github.subjekt.compiler.expressions.ir.BinaryOperator.PLUS","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-binary-operator/-p-l-u-s/index.html","searchKeys":["PLUS","PLUS","io.github.subjekt.compiler.expressions.ir.BinaryOperator.PLUS"]},{"name":"PLUS","description":"io.github.subjekt.compiler.expressions.ir.UnaryOperator.PLUS","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-unary-operator/-p-l-u-s/index.html","searchKeys":["PLUS","PLUS","io.github.subjekt.compiler.expressions.ir.UnaryOperator.PLUS"]},{"name":"STRING","description":"io.github.subjekt.compiler.expressions.ir.IrNativeType.STRING","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-native-type/-s-t-r-i-n-g/index.html","searchKeys":["STRING","STRING","io.github.subjekt.compiler.expressions.ir.IrNativeType.STRING"]},{"name":"STRING","description":"io.github.subjekt.compiler.expressions.ir.Type.STRING","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-type/-s-t-r-i-n-g/index.html","searchKeys":["STRING","STRING","io.github.subjekt.compiler.expressions.ir.Type.STRING"]},{"name":"UNDEFINED","description":"io.github.subjekt.compiler.expressions.ir.Type.UNDEFINED","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-type/-u-n-d-e-f-i-n-e-d/index.html","searchKeys":["UNDEFINED","UNDEFINED","io.github.subjekt.compiler.expressions.ir.Type.UNDEFINED"]},{"name":"WARNING","description":"io.github.subjekt.utils.MessageCollector.MessageType.WARNING","location":"subjekt/io.github.subjekt.utils/-message-collector/-message-type/-w-a-r-n-i-n-g/index.html","searchKeys":["WARNING","WARNING","io.github.subjekt.utils.MessageCollector.MessageType.WARNING"]},{"name":"abstract class AbstractSubjekt","description":"io.github.subjekt.AbstractSubjekt","location":"subjekt/io.github.subjekt/-abstract-subjekt/index.html","searchKeys":["AbstractSubjekt","abstract class AbstractSubjekt","io.github.subjekt.AbstractSubjekt"]},{"name":"abstract class BaseExpressionVisitor<T>(default: T) : IrVisitor<T> ","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-base-expression-visitor/index.html","searchKeys":["BaseExpressionVisitor","abstract class BaseExpressionVisitor<T>(default: T) : IrVisitor<T> ","io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor"]},{"name":"abstract fun export(resolvedSuite: ResolvedSuite): SubjektResult<I, R>","description":"io.github.subjekt.core.resolution.Exporter.export","location":"subjekt/io.github.subjekt.core.resolution/-exporter/export.html","searchKeys":["export","abstract fun export(resolvedSuite: ResolvedSuite): SubjektResult<I, R>","io.github.subjekt.core.resolution.Exporter.export"]},{"name":"abstract fun extract(): Result<Map<String, Any>>","description":"io.github.subjekt.core.Source.extract","location":"subjekt/io.github.subjekt.core/-source/extract.html","searchKeys":["extract","abstract fun extract(): Result<Map<String, Any>>","io.github.subjekt.core.Source.extract"]},{"name":"abstract fun flushMessages()","description":"io.github.subjekt.utils.MessageCollector.flushMessages","location":"subjekt/io.github.subjekt.utils/-message-collector/flush-messages.html","searchKeys":["flushMessages","abstract fun flushMessages()","io.github.subjekt.utils.MessageCollector.flushMessages"]},{"name":"abstract fun map(resolvedSuite: ResolvedSuite): ResolvedSuite","description":"io.github.subjekt.core.resolution.Mapper.map","location":"subjekt/io.github.subjekt.core.resolution/-mapper/map.html","searchKeys":["map","abstract fun map(resolvedSuite: ResolvedSuite): ResolvedSuite","io.github.subjekt.core.resolution.Mapper.map"]},{"name":"abstract fun visitBinaryOperation(node: IrBinaryOperation): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitBinaryOperation","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir/-ir-visitor/visit-binary-operation.html","searchKeys":["visitBinaryOperation","abstract fun visitBinaryOperation(node: IrBinaryOperation): T","io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitBinaryOperation"]},{"name":"abstract fun visitCall(node: IrCall): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitCall","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir/-ir-visitor/visit-call.html","searchKeys":["visitCall","abstract fun visitCall(node: IrCall): T","io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitCall"]},{"name":"abstract fun visitCast(node: IrCast): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitCast","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir/-ir-visitor/visit-cast.html","searchKeys":["visitCast","abstract fun visitCast(node: IrCast): T","io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitCast"]},{"name":"abstract fun visitDotCall(node: IrDotCall): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitDotCall","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir/-ir-visitor/visit-dot-call.html","searchKeys":["visitDotCall","abstract fun visitDotCall(node: IrDotCall): T","io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitDotCall"]},{"name":"abstract fun visitEndOfSlice(node: IrEndOfSlice): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitEndOfSlice","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir/-ir-visitor/visit-end-of-slice.html","searchKeys":["visitEndOfSlice","abstract fun visitEndOfSlice(node: IrEndOfSlice): T","io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitEndOfSlice"]},{"name":"abstract fun visitFloatLiteral(node: IrFloatLiteral): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitFloatLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir/-ir-visitor/visit-float-literal.html","searchKeys":["visitFloatLiteral","abstract fun visitFloatLiteral(node: IrFloatLiteral): T","io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitFloatLiteral"]},{"name":"abstract fun visitIntegerLiteral(node: IrIntegerLiteral): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitIntegerLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir/-ir-visitor/visit-integer-literal.html","searchKeys":["visitIntegerLiteral","abstract fun visitIntegerLiteral(node: IrIntegerLiteral): T","io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitIntegerLiteral"]},{"name":"abstract fun visitParameter(node: IrParameter): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitParameter","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir/-ir-visitor/visit-parameter.html","searchKeys":["visitParameter","abstract fun visitParameter(node: IrParameter): T","io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitParameter"]},{"name":"abstract fun visitRangeSlice(node: IrRangeSlice): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitRangeSlice","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir/-ir-visitor/visit-range-slice.html","searchKeys":["visitRangeSlice","abstract fun visitRangeSlice(node: IrRangeSlice): T","io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitRangeSlice"]},{"name":"abstract fun visitSingleSlice(node: IrSingleSlice): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitSingleSlice","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir/-ir-visitor/visit-single-slice.html","searchKeys":["visitSingleSlice","abstract fun visitSingleSlice(node: IrSingleSlice): T","io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitSingleSlice"]},{"name":"abstract fun visitStringLiteral(node: IrStringLiteral): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitStringLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir/-ir-visitor/visit-string-literal.html","searchKeys":["visitStringLiteral","abstract fun visitStringLiteral(node: IrStringLiteral): T","io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitStringLiteral"]},{"name":"abstract fun visitUnaryOperation(node: IrUnaryOperation): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitUnaryOperation","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir/-ir-visitor/visit-unary-operation.html","searchKeys":["visitUnaryOperation","abstract fun visitUnaryOperation(node: IrUnaryOperation): T","io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visitUnaryOperation"]},{"name":"abstract val callableId: String","description":"io.github.subjekt.compiler.expressions.CallableSymbol.callableId","location":"subjekt/io.github.subjekt.compiler.expressions/-callable-symbol/callable-id.html","searchKeys":["callableId","abstract val callableId: String","io.github.subjekt.compiler.expressions.CallableSymbol.callableId"]},{"name":"abstract val messages: List<MessageCollector.Message>","description":"io.github.subjekt.utils.MessageCollector.messages","location":"subjekt/io.github.subjekt.utils/-message-collector/messages.html","searchKeys":["messages","abstract val messages: List<MessageCollector.Message>","io.github.subjekt.utils.MessageCollector.messages"]},{"name":"abstract val nArgs: Int","description":"io.github.subjekt.compiler.expressions.CallableSymbol.nArgs","location":"subjekt/io.github.subjekt.compiler.expressions/-callable-symbol/n-args.html","searchKeys":["nArgs","abstract val nArgs: Int","io.github.subjekt.compiler.expressions.CallableSymbol.nArgs"]},{"name":"abstract val text: String","description":"io.github.subjekt.core.Source.text","location":"subjekt/io.github.subjekt.core/-source/text.html","searchKeys":["text","abstract val text: String","io.github.subjekt.core.Source.text"]},{"name":"class Configuration : MutableMap<String, Any> ","description":"io.github.subjekt.core.Configuration","location":"subjekt/io.github.subjekt.core/-configuration/index.html","searchKeys":["Configuration","class Configuration : MutableMap<String, Any> ","io.github.subjekt.core.Configuration"]},{"name":"class Expression(val source: String)","description":"io.github.subjekt.compiler.expressions.Expression","location":"subjekt/io.github.subjekt.compiler.expressions/-expression/index.html","searchKeys":["Expression","class Expression(val source: String)","io.github.subjekt.compiler.expressions.Expression"]},{"name":"class ExpressionVisitor(val context: Context) : BaseExpressionVisitor<String> ","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-expression-visitor/index.html","searchKeys":["ExpressionVisitor","class ExpressionVisitor(val context: Context) : BaseExpressionVisitor<String> ","io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor"]},{"name":"class IntegerExpressionVisitor : BaseExpressionVisitor<Int> ","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-integer-expression-visitor/index.html","searchKeys":["IntegerExpressionVisitor","class IntegerExpressionVisitor : BaseExpressionVisitor<Int> ","io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor"]},{"name":"class InternalCompilerException(val node: IrNode?, val message: String?) : Exception","description":"io.github.subjekt.compiler.expressions.InternalCompilerException","location":"subjekt/io.github.subjekt.compiler.expressions/-internal-compiler-exception/index.html","searchKeys":["InternalCompilerException","class InternalCompilerException(val node: IrNode?, val message: String?) : Exception","io.github.subjekt.compiler.expressions.InternalCompilerException"]},{"name":"class JsonResult<I, R>(singleSerializer: KSerializer<I>, reduceSerializer: KSerializer<R>, resolvedSuite: ResolvedSuite, contentResolver: (ResolvedSubject) -> I, reduce: (List<I>) -> R, nameResolver: (ResolvedSubject) -> String = { it.name?.value ?: it.subjectId.toString() }) : SubjektResult<I, R> ","description":"io.github.subjekt.core.resolution.JsonResult","location":"subjekt/io.github.subjekt.core.resolution/-json-result/index.html","searchKeys":["JsonResult","class JsonResult<I, R>(singleSerializer: KSerializer<I>, reduceSerializer: KSerializer<R>, resolvedSuite: ResolvedSuite, contentResolver: (ResolvedSubject) -> I, reduce: (List<I>) -> R, nameResolver: (ResolvedSubject) -> String = { it.name?.value ?: it.subjectId.toString() }) : SubjektResult<I, R> ","io.github.subjekt.core.resolution.JsonResult"]},{"name":"class JsonSource(val text: String) : Source","description":"io.github.subjekt.core.JsonSource","location":"subjekt/io.github.subjekt.core/-json-source/index.html","searchKeys":["JsonSource","class JsonSource(val text: String) : Source","io.github.subjekt.core.JsonSource"]},{"name":"class LogVisitor(enabled: Boolean = true) : BaseExpressionVisitor<Unit> ","description":"io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.debug/-log-visitor/index.html","searchKeys":["LogVisitor","class LogVisitor(enabled: Boolean = true) : BaseExpressionVisitor<Unit> ","io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor"]},{"name":"class NullCollector : MessageCollector","description":"io.github.subjekt.utils.MessageCollector.NullCollector","location":"subjekt/io.github.subjekt.utils/-message-collector/-null-collector/index.html","searchKeys":["NullCollector","class NullCollector : MessageCollector","io.github.subjekt.utils.MessageCollector.NullCollector"]},{"name":"class Resolvable(val source: String, expressionPrefix: String = \"{{\", expressionSuffix: String = \"}}\")","description":"io.github.subjekt.core.Resolvable","location":"subjekt/io.github.subjekt.core/-resolvable/index.html","searchKeys":["Resolvable","class Resolvable(val source: String, expressionPrefix: String = \"{{\", expressionSuffix: String = \"}}\")","io.github.subjekt.core.Resolvable"]},{"name":"class SimpleCollector(showErrors: Boolean = true, showWarnings: Boolean = true, showInfos: Boolean = false) : MessageCollector","description":"io.github.subjekt.utils.MessageCollector.SimpleCollector","location":"subjekt/io.github.subjekt.utils/-message-collector/-simple-collector/index.html","searchKeys":["SimpleCollector","class SimpleCollector(showErrors: Boolean = true, showWarnings: Boolean = true, showInfos: Boolean = false) : MessageCollector","io.github.subjekt.utils.MessageCollector.SimpleCollector"]},{"name":"class Subjekt : AbstractSubjekt","description":"io.github.subjekt.Subjekt","location":"subjekt/io.github.subjekt/[js]-subjekt/index.html","searchKeys":["Subjekt","class Subjekt : AbstractSubjekt","io.github.subjekt.Subjekt"]},{"name":"class Subjekt : AbstractSubjekt","description":"io.github.subjekt.Subjekt","location":"subjekt/io.github.subjekt/[jvm]-subjekt/index.html","searchKeys":["Subjekt","class Subjekt : AbstractSubjekt","io.github.subjekt.Subjekt"]},{"name":"class SymbolNotFoundException(symbol: ResolvableSymbol) : Exception","description":"io.github.subjekt.compiler.expressions.SymbolNotFoundException","location":"subjekt/io.github.subjekt.compiler.expressions/-symbol-not-found-exception/index.html","searchKeys":["SymbolNotFoundException","class SymbolNotFoundException(symbol: ResolvableSymbol) : Exception","io.github.subjekt.compiler.expressions.SymbolNotFoundException"]},{"name":"class TextResult(resolvedSuite: ResolvedSuite, contentResolver: (ResolvedSubject) -> String, reduce: (List<String>) -> List<String> = { it }, separator: String = \"\", nameResolver: (ResolvedSubject) -> String = { it.name?.value ?: it.subjectId.toString() }) : SubjektResult<String, List<String>> ","description":"io.github.subjekt.core.resolution.TextResult","location":"subjekt/io.github.subjekt.core.resolution/-text-result/index.html","searchKeys":["TextResult","class TextResult(resolvedSuite: ResolvedSuite, contentResolver: (ResolvedSubject) -> String, reduce: (List<String>) -> List<String> = { it }, separator: String = \"\", nameResolver: (ResolvedSubject) -> String = { it.name?.value ?: it.subjectId.toString() }) : SubjektResult<String, List<String>> ","io.github.subjekt.core.resolution.TextResult"]},{"name":"class TypeException(message: String, cause: Throwable? = null) : Exception","description":"io.github.subjekt.compiler.expressions.TypeException","location":"subjekt/io.github.subjekt.compiler.expressions/-type-exception/index.html","searchKeys":["TypeException","class TypeException(message: String, cause: Throwable? = null) : Exception","io.github.subjekt.compiler.expressions.TypeException"]},{"name":"class TypeVisitor(val context: Context) : IrVisitor<Type> ","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-type-visitor/index.html","searchKeys":["TypeVisitor","class TypeVisitor(val context: Context) : IrVisitor<Type> ","io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor"]},{"name":"class YamlSource(val text: String) : Source","description":"io.github.subjekt.core.YamlSource","location":"subjekt/io.github.subjekt.core/-yaml-source/index.html","searchKeys":["YamlSource","class YamlSource(val text: String) : Source","io.github.subjekt.core.YamlSource"]},{"name":"const val DEFAULT_FIELD_NAME: String","description":"io.github.subjekt.core.Subject.Companion.DEFAULT_FIELD_NAME","location":"subjekt/io.github.subjekt.core/-subject/-companion/-d-e-f-a-u-l-t_-f-i-e-l-d_-n-a-m-e.html","searchKeys":["DEFAULT_FIELD_NAME","const val DEFAULT_FIELD_NAME: String","io.github.subjekt.core.Subject.Companion.DEFAULT_FIELD_NAME"]},{"name":"const val DEFAULT_ID_KEY: String","description":"io.github.subjekt.core.Macro.Companion.DEFAULT_ID_KEY","location":"subjekt/io.github.subjekt.core/-macro/-companion/-d-e-f-a-u-l-t_-i-d_-k-e-y.html","searchKeys":["DEFAULT_ID_KEY","const val DEFAULT_ID_KEY: String","io.github.subjekt.core.Macro.Companion.DEFAULT_ID_KEY"]},{"name":"const val DEFAULT_ID_KEY: String","description":"io.github.subjekt.core.Parameter.Companion.DEFAULT_ID_KEY","location":"subjekt/io.github.subjekt.core/-parameter/-companion/-d-e-f-a-u-l-t_-i-d_-k-e-y.html","searchKeys":["DEFAULT_ID_KEY","const val DEFAULT_ID_KEY: String","io.github.subjekt.core.Parameter.Companion.DEFAULT_ID_KEY"]},{"name":"const val DEFAULT_NAME_KEY: String","description":"io.github.subjekt.core.Subject.Companion.DEFAULT_NAME_KEY","location":"subjekt/io.github.subjekt.core/-subject/-companion/-d-e-f-a-u-l-t_-n-a-m-e_-k-e-y.html","searchKeys":["DEFAULT_NAME_KEY","const val DEFAULT_NAME_KEY: String","io.github.subjekt.core.Subject.Companion.DEFAULT_NAME_KEY"]},{"name":"const val DEFAULT_RESOLVABLES_KEY: String","description":"io.github.subjekt.core.Macro.Companion.DEFAULT_RESOLVABLES_KEY","location":"subjekt/io.github.subjekt.core/-macro/-companion/-d-e-f-a-u-l-t_-r-e-s-o-l-v-a-b-l-e-s_-k-e-y.html","searchKeys":["DEFAULT_RESOLVABLES_KEY","const val DEFAULT_RESOLVABLES_KEY: String","io.github.subjekt.core.Macro.Companion.DEFAULT_RESOLVABLES_KEY"]},{"name":"const val DEFAULT_VALUES_KEY: String","description":"io.github.subjekt.core.Parameter.Companion.DEFAULT_VALUES_KEY","location":"subjekt/io.github.subjekt.core/-parameter/-companion/-d-e-f-a-u-l-t_-v-a-l-u-e-s_-k-e-y.html","searchKeys":["DEFAULT_VALUES_KEY","const val DEFAULT_VALUES_KEY: String","io.github.subjekt.core.Parameter.Companion.DEFAULT_VALUES_KEY"]},{"name":"constructor()","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor.IntegerExpressionVisitor","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-integer-expression-visitor/-integer-expression-visitor.html","searchKeys":["IntegerExpressionVisitor","constructor()","io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor.IntegerExpressionVisitor"]},{"name":"constructor()","description":"io.github.subjekt.core.Configuration.Configuration","location":"subjekt/io.github.subjekt.core/-configuration/-configuration.html","searchKeys":["Configuration","constructor()","io.github.subjekt.core.Configuration.Configuration"]},{"name":"constructor()","description":"io.github.subjekt.utils.MessageCollector.NullCollector.NullCollector","location":"subjekt/io.github.subjekt.utils/-message-collector/-null-collector/-null-collector.html","searchKeys":["NullCollector","constructor()","io.github.subjekt.utils.MessageCollector.NullCollector.NullCollector"]},{"name":"constructor(callableId: String, nArgs: Int)","description":"io.github.subjekt.compiler.expressions.CallSymbol.CallSymbol","location":"subjekt/io.github.subjekt.compiler.expressions/-call-symbol/-call-symbol.html","searchKeys":["CallSymbol","constructor(callableId: String, nArgs: Int)","io.github.subjekt.compiler.expressions.CallSymbol.CallSymbol"]},{"name":"constructor(context: Context)","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.ExpressionVisitor","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-expression-visitor/-expression-visitor.html","searchKeys":["ExpressionVisitor","constructor(context: Context)","io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.ExpressionVisitor"]},{"name":"constructor(context: Context)","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.TypeVisitor","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-type-visitor/-type-visitor.html","searchKeys":["TypeVisitor","constructor(context: Context)","io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.TypeVisitor"]},{"name":"constructor(default: T)","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.BaseExpressionVisitor","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-base-expression-visitor/-base-expression-visitor.html","searchKeys":["BaseExpressionVisitor","constructor(default: T)","io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.BaseExpressionVisitor"]},{"name":"constructor(definedParameters: Map<String, DefinedParameter> = emptyMap(), definedMacros: Map<String, DefinedMacro> = emptyMap(), functions: Map<String, SubjektFunction> = emptyMap(), originalSymbolTable: SymbolTable? = null)","description":"io.github.subjekt.core.definition.Context.Context","location":"subjekt/io.github.subjekt.core.definition/-context/-context.html","searchKeys":["Context","constructor(definedParameters: Map<String, DefinedParameter> = emptyMap(), definedMacros: Map<String, DefinedMacro> = emptyMap(), functions: Map<String, SubjektFunction> = emptyMap(), originalSymbolTable: SymbolTable? = null)","io.github.subjekt.core.definition.Context.Context"]},{"name":"constructor(enabled: Boolean = true)","description":"io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.LogVisitor","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.debug/-log-visitor/-log-visitor.html","searchKeys":["LogVisitor","constructor(enabled: Boolean = true)","io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.LogVisitor"]},{"name":"constructor(id: Int, resolvables: Map<String, Resolvable>, symbolTable: SymbolTable = SymbolTable())","description":"io.github.subjekt.core.Subject.Subject","location":"subjekt/io.github.subjekt.core/-subject/-subject.html","searchKeys":["Subject","constructor(id: Int, resolvables: Map<String, Resolvable>, symbolTable: SymbolTable = SymbolTable())","io.github.subjekt.core.Subject.Subject"]},{"name":"constructor(id: String)","description":"io.github.subjekt.compiler.expressions.ParameterSymbol.ParameterSymbol","location":"subjekt/io.github.subjekt.compiler.expressions/-parameter-symbol/-parameter-symbol.html","searchKeys":["ParameterSymbol","constructor(id: String)","io.github.subjekt.compiler.expressions.ParameterSymbol.ParameterSymbol"]},{"name":"constructor(id: String, argumentsIdentifiers: List<String>, resolvables: List<Resolvable>)","description":"io.github.subjekt.core.Macro.Macro","location":"subjekt/io.github.subjekt.core/-macro/-macro.html","searchKeys":["Macro","constructor(id: String, argumentsIdentifiers: List<String>, resolvables: List<Resolvable>)","io.github.subjekt.core.Macro.Macro"]},{"name":"constructor(id: String, function: (List<String>) -> String)","description":"io.github.subjekt.core.SubjektFunction.SubjektFunction","location":"subjekt/io.github.subjekt.core/-subjekt-function/-subjekt-function.html","searchKeys":["SubjektFunction","constructor(id: String, function: (List<String>) -> String)","io.github.subjekt.core.SubjektFunction.SubjektFunction"]},{"name":"constructor(id: String, symbolTable: SymbolTable, path: String?)","description":"io.github.subjekt.core.Module.Module","location":"subjekt/io.github.subjekt.core/-module/-module.html","searchKeys":["Module","constructor(id: String, symbolTable: SymbolTable, path: String?)","io.github.subjekt.core.Module.Module"]},{"name":"constructor(id: String, symbolTable: SymbolTable, subjects: List<Subject>, configuration: Configuration)","description":"io.github.subjekt.core.Suite.Suite","location":"subjekt/io.github.subjekt.core/-suite/-suite.html","searchKeys":["Suite","constructor(id: String, symbolTable: SymbolTable, subjects: List<Subject>, configuration: Configuration)","io.github.subjekt.core.Suite.Suite"]},{"name":"constructor(id: String, values: List<String>)","description":"io.github.subjekt.core.Parameter.Parameter","location":"subjekt/io.github.subjekt.core/-parameter/-parameter.html","searchKeys":["Parameter","constructor(id: String, values: List<String>)","io.github.subjekt.core.Parameter.Parameter"]},{"name":"constructor(identifier: String, arguments: List<IrNode>, line: Int)","description":"io.github.subjekt.compiler.expressions.ir.IrCall.IrCall","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-call/-ir-call.html","searchKeys":["IrCall","constructor(identifier: String, arguments: List<IrNode>, line: Int)","io.github.subjekt.compiler.expressions.ir.IrCall.IrCall"]},{"name":"constructor(identifier: String, indexExpression: IrNode, line: Int = -1)","description":"io.github.subjekt.compiler.expressions.ir.IrSingleSlice.IrSingleSlice","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-single-slice/-ir-single-slice.html","searchKeys":["IrSingleSlice","constructor(identifier: String, indexExpression: IrNode, line: Int = -1)","io.github.subjekt.compiler.expressions.ir.IrSingleSlice.IrSingleSlice"]},{"name":"constructor(identifier: String, line: Int)","description":"io.github.subjekt.compiler.expressions.ir.IrParameter.IrParameter","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-parameter/-ir-parameter.html","searchKeys":["IrParameter","constructor(identifier: String, line: Int)","io.github.subjekt.compiler.expressions.ir.IrParameter.IrParameter"]},{"name":"constructor(identifier: String, start: IrAtomicNode = IrIntegerLiteral(0, -1), end: IrAtomicNode = IrEndOfSlice(-1), step: IrAtomicNode = IrIntegerLiteral(1, -1), symbol: SliceSymbol? = null, line: Int = -1)","description":"io.github.subjekt.compiler.expressions.ir.IrRangeSlice.IrRangeSlice","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-range-slice/-ir-range-slice.html","searchKeys":["IrRangeSlice","constructor(identifier: String, start: IrAtomicNode = IrIntegerLiteral(0, -1), end: IrAtomicNode = IrEndOfSlice(-1), step: IrAtomicNode = IrIntegerLiteral(1, -1), symbol: SliceSymbol? = null, line: Int = -1)","io.github.subjekt.compiler.expressions.ir.IrRangeSlice.IrRangeSlice"]},{"name":"constructor(left: IrNode, right: IrNode, operator: BinaryOperator, line: Int)","description":"io.github.subjekt.compiler.expressions.ir.IrBinaryOperation.IrBinaryOperation","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-binary-operation/-ir-binary-operation.html","searchKeys":["IrBinaryOperation","constructor(left: IrNode, right: IrNode, operator: BinaryOperator, line: Int)","io.github.subjekt.compiler.expressions.ir.IrBinaryOperation.IrBinaryOperation"]},{"name":"constructor(line: Int = -1)","description":"io.github.subjekt.compiler.expressions.ir.IrEndOfSlice.IrEndOfSlice","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-end-of-slice/-ir-end-of-slice.html","searchKeys":["IrEndOfSlice","constructor(line: Int = -1)","io.github.subjekt.compiler.expressions.ir.IrEndOfSlice.IrEndOfSlice"]},{"name":"constructor(line: Int = -1, charPositionInLine: Int = -1)","description":"io.github.subjekt.utils.MessageCollector.Position.Position","location":"subjekt/io.github.subjekt.utils/-message-collector/-position/-position.html","searchKeys":["Position","constructor(line: Int = -1, charPositionInLine: Int = -1)","io.github.subjekt.utils.MessageCollector.Position.Position"]},{"name":"constructor(line: Int)","description":"io.github.subjekt.compiler.expressions.ir.Error.Error","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-error/-error.html","searchKeys":["Error","constructor(line: Int)","io.github.subjekt.compiler.expressions.ir.Error.Error"]},{"name":"constructor(macroId: String, argumentsIdentifiers: List<String>, value: Resolvable)","description":"io.github.subjekt.core.definition.DefinedMacro.DefinedMacro","location":"subjekt/io.github.subjekt.core.definition/-defined-macro/-defined-macro.html","searchKeys":["DefinedMacro","constructor(macroId: String, argumentsIdentifiers: List<String>, value: Resolvable)","io.github.subjekt.core.definition.DefinedMacro.DefinedMacro"]},{"name":"constructor(message: String, cause: Throwable? = null)","description":"io.github.subjekt.compiler.expressions.TypeException.TypeException","location":"subjekt/io.github.subjekt.compiler.expressions/-type-exception/-type-exception.html","searchKeys":["TypeException","constructor(message: String, cause: Throwable? = null)","io.github.subjekt.compiler.expressions.TypeException.TypeException"]},{"name":"constructor(node: IrNode)","description":"io.github.subjekt.compiler.expressions.ir.IrTree.IrTree","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-tree/-ir-tree.html","searchKeys":["IrTree","constructor(node: IrNode)","io.github.subjekt.compiler.expressions.ir.IrTree.IrTree"]},{"name":"constructor(node: IrNode?, message: String?)","description":"io.github.subjekt.compiler.expressions.InternalCompilerException.InternalCompilerException","location":"subjekt/io.github.subjekt.compiler.expressions/-internal-compiler-exception/-internal-compiler-exception.html","searchKeys":["InternalCompilerException","constructor(node: IrNode?, message: String?)","io.github.subjekt.compiler.expressions.InternalCompilerException.InternalCompilerException"]},{"name":"constructor(operator: UnaryOperator, operand: IrNode, line: Int = -1)","description":"io.github.subjekt.compiler.expressions.ir.IrUnaryOperation.IrUnaryOperation","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-unary-operation/-ir-unary-operation.html","searchKeys":["IrUnaryOperation","constructor(operator: UnaryOperator, operand: IrNode, line: Int = -1)","io.github.subjekt.compiler.expressions.ir.IrUnaryOperation.IrUnaryOperation"]},{"name":"constructor(originalSuite: Suite, resolvedSubjects: Set<ResolvedSubject>)","description":"io.github.subjekt.core.resolution.ResolvedSuite.ResolvedSuite","location":"subjekt/io.github.subjekt.core.resolution/-resolved-suite/-resolved-suite.html","searchKeys":["ResolvedSuite","constructor(originalSuite: Suite, resolvedSubjects: Set<ResolvedSubject>)","io.github.subjekt.core.resolution.ResolvedSuite.ResolvedSuite"]},{"name":"constructor(parameter: ParameterSymbol, startIndex: Int = 0, endIndex: Int? = null, stepIndex: Int = 1)","description":"io.github.subjekt.compiler.expressions.SliceSymbol.SliceSymbol","location":"subjekt/io.github.subjekt.compiler.expressions/-slice-symbol/-slice-symbol.html","searchKeys":["SliceSymbol","constructor(parameter: ParameterSymbol, startIndex: Int = 0, endIndex: Int? = null, stepIndex: Int = 1)","io.github.subjekt.compiler.expressions.SliceSymbol.SliceSymbol"]},{"name":"constructor(parameterId: String, value: String, originalParameter: Parameter? = null)","description":"io.github.subjekt.core.definition.DefinedParameter.DefinedParameter","location":"subjekt/io.github.subjekt.core.definition/-defined-parameter/-defined-parameter.html","searchKeys":["DefinedParameter","constructor(parameterId: String, value: String, originalParameter: Parameter? = null)","io.github.subjekt.core.definition.DefinedParameter.DefinedParameter"]},{"name":"constructor(receiver: IrNode, callId: String, arguments: List<IrNode>, line: Int)","description":"io.github.subjekt.compiler.expressions.ir.IrDotCall.IrDotCall","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-dot-call/-ir-dot-call.html","searchKeys":["IrDotCall","constructor(receiver: IrNode, callId: String, arguments: List<IrNode>, line: Int)","io.github.subjekt.compiler.expressions.ir.IrDotCall.IrDotCall"]},{"name":"constructor(receiver: IrNode, id: String, nArgs: Int)","description":"io.github.subjekt.compiler.expressions.QualifiedCallSymbol.QualifiedCallSymbol","location":"subjekt/io.github.subjekt.compiler.expressions/-qualified-call-symbol/-qualified-call-symbol.html","searchKeys":["QualifiedCallSymbol","constructor(receiver: IrNode, id: String, nArgs: Int)","io.github.subjekt.compiler.expressions.QualifiedCallSymbol.QualifiedCallSymbol"]},{"name":"constructor(resolvedSuite: ResolvedSuite, contentResolver: (ResolvedSubject) -> String, reduce: (List<String>) -> List<String> = { it }, separator: String = \"\", nameResolver: (ResolvedSubject) -> String = { it.name?.value ?: it.subjectId.toString() })","description":"io.github.subjekt.core.resolution.TextResult.TextResult","location":"subjekt/io.github.subjekt.core.resolution/-text-result/-text-result.html","searchKeys":["TextResult","constructor(resolvedSuite: ResolvedSuite, contentResolver: (ResolvedSubject) -> String, reduce: (List<String>) -> List<String> = { it }, separator: String = \"\", nameResolver: (ResolvedSubject) -> String = { it.name?.value ?: it.subjectId.toString() })","io.github.subjekt.core.resolution.TextResult.TextResult"]},{"name":"constructor(showErrors: Boolean = true, showWarnings: Boolean = true, showInfos: Boolean = false)","description":"io.github.subjekt.utils.MessageCollector.SimpleCollector.SimpleCollector","location":"subjekt/io.github.subjekt.utils/-message-collector/-simple-collector/-simple-collector.html","searchKeys":["SimpleCollector","constructor(showErrors: Boolean = true, showWarnings: Boolean = true, showInfos: Boolean = false)","io.github.subjekt.utils.MessageCollector.SimpleCollector.SimpleCollector"]},{"name":"constructor(singleSerializer: KSerializer<I>, reduceSerializer: KSerializer<R>, resolvedSuite: ResolvedSuite, contentResolver: (ResolvedSubject) -> I, reduce: (List<I>) -> R, nameResolver: (ResolvedSubject) -> String = { it.name?.value ?: it.subjectId.toString() })","description":"io.github.subjekt.core.resolution.JsonResult.JsonResult","location":"subjekt/io.github.subjekt.core.resolution/-json-result/-json-result.html","searchKeys":["JsonResult","constructor(singleSerializer: KSerializer<I>, reduceSerializer: KSerializer<R>, resolvedSuite: ResolvedSuite, contentResolver: (ResolvedSubject) -> I, reduce: (List<I>) -> R, nameResolver: (ResolvedSubject) -> String = { it.name?.value ?: it.subjectId.toString() })","io.github.subjekt.core.resolution.JsonResult.JsonResult"]},{"name":"constructor(source: String)","description":"io.github.subjekt.compiler.expressions.Expression.Expression","location":"subjekt/io.github.subjekt.compiler.expressions/-expression/-expression.html","searchKeys":["Expression","constructor(source: String)","io.github.subjekt.compiler.expressions.Expression.Expression"]},{"name":"constructor(source: String, expressionPrefix: String = \"{{\", expressionSuffix: String = \"}}\")","description":"io.github.subjekt.core.Resolvable.Resolvable","location":"subjekt/io.github.subjekt.core/-resolvable/-resolvable.html","searchKeys":["Resolvable","constructor(source: String, expressionPrefix: String = \"{{\", expressionSuffix: String = \"}}\")","io.github.subjekt.core.Resolvable.Resolvable"]},{"name":"constructor(subjectId: Int, instances: Map<String, Instance>)","description":"io.github.subjekt.core.resolution.ResolvedSubject.ResolvedSubject","location":"subjekt/io.github.subjekt.core.resolution/-resolved-subject/-resolved-subject.html","searchKeys":["ResolvedSubject","constructor(subjectId: Int, instances: Map<String, Instance>)","io.github.subjekt.core.resolution.ResolvedSubject.ResolvedSubject"]},{"name":"constructor(symbol: ResolvableSymbol)","description":"io.github.subjekt.compiler.expressions.SymbolNotFoundException.SymbolNotFoundException","location":"subjekt/io.github.subjekt.compiler.expressions/-symbol-not-found-exception/-symbol-not-found-exception.html","searchKeys":["SymbolNotFoundException","constructor(symbol: ResolvableSymbol)","io.github.subjekt.compiler.expressions.SymbolNotFoundException.SymbolNotFoundException"]},{"name":"constructor(text: String)","description":"io.github.subjekt.core.JsonSource.JsonSource","location":"subjekt/io.github.subjekt.core/-json-source/-json-source.html","searchKeys":["JsonSource","constructor(text: String)","io.github.subjekt.core.JsonSource.JsonSource"]},{"name":"constructor(text: String)","description":"io.github.subjekt.core.YamlSource.YamlSource","location":"subjekt/io.github.subjekt.core/-yaml-source/-yaml-source.html","searchKeys":["YamlSource","constructor(text: String)","io.github.subjekt.core.YamlSource.YamlSource"]},{"name":"constructor(type: MessageCollector.MessageType, message: String)","description":"io.github.subjekt.utils.MessageCollector.Message.Message","location":"subjekt/io.github.subjekt.utils/-message-collector/-message/-message.html","searchKeys":["Message","constructor(type: MessageCollector.MessageType, message: String)","io.github.subjekt.utils.MessageCollector.Message.Message"]},{"name":"constructor(value: Double, line: Int)","description":"io.github.subjekt.compiler.expressions.ir.IrFloatLiteral.IrFloatLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-float-literal/-ir-float-literal.html","searchKeys":["IrFloatLiteral","constructor(value: Double, line: Int)","io.github.subjekt.compiler.expressions.ir.IrFloatLiteral.IrFloatLiteral"]},{"name":"constructor(value: Int, line: Int)","description":"io.github.subjekt.compiler.expressions.ir.IrIntegerLiteral.IrIntegerLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-integer-literal/-ir-integer-literal.html","searchKeys":["IrIntegerLiteral","constructor(value: Int, line: Int)","io.github.subjekt.compiler.expressions.ir.IrIntegerLiteral.IrIntegerLiteral"]},{"name":"constructor(value: IrNode?, targetType: IrNativeType, line: Int = -1)","description":"io.github.subjekt.compiler.expressions.ir.IrCast.IrCast","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-cast/-ir-cast.html","searchKeys":["IrCast","constructor(value: IrNode?, targetType: IrNativeType, line: Int = -1)","io.github.subjekt.compiler.expressions.ir.IrCast.IrCast"]},{"name":"constructor(value: String, line: Int)","description":"io.github.subjekt.compiler.expressions.ir.IrStringLiteral.IrStringLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-string-literal/-ir-string-literal.html","searchKeys":["IrStringLiteral","constructor(value: String, line: Int)","io.github.subjekt.compiler.expressions.ir.IrStringLiteral.IrStringLiteral"]},{"name":"constructor(value: String, origin: Resolvable)","description":"io.github.subjekt.core.resolution.Instance.Instance","location":"subjekt/io.github.subjekt.core.resolution/-instance/-instance.html","searchKeys":["Instance","constructor(value: String, origin: Resolvable)","io.github.subjekt.core.resolution.Instance.Instance"]},{"name":"data class CallSymbol(val callableId: String, val nArgs: Int) : CallableSymbol","description":"io.github.subjekt.compiler.expressions.CallSymbol","location":"subjekt/io.github.subjekt.compiler.expressions/-call-symbol/index.html","searchKeys":["CallSymbol","data class CallSymbol(val callableId: String, val nArgs: Int) : CallableSymbol","io.github.subjekt.compiler.expressions.CallSymbol"]},{"name":"data class Context(val definedParameters: Map<String, DefinedParameter> = emptyMap(), val definedMacros: Map<String, DefinedMacro> = emptyMap(), val functions: Map<String, SubjektFunction> = emptyMap(), val originalSymbolTable: SymbolTable? = null)","description":"io.github.subjekt.core.definition.Context","location":"subjekt/io.github.subjekt.core.definition/-context/index.html","searchKeys":["Context","data class Context(val definedParameters: Map<String, DefinedParameter> = emptyMap(), val definedMacros: Map<String, DefinedMacro> = emptyMap(), val functions: Map<String, SubjektFunction> = emptyMap(), val originalSymbolTable: SymbolTable? = null)","io.github.subjekt.core.definition.Context"]},{"name":"data class DefinedMacro(val macroId: String, val argumentsIdentifiers: List<String>, val value: Resolvable)","description":"io.github.subjekt.core.definition.DefinedMacro","location":"subjekt/io.github.subjekt.core.definition/-defined-macro/index.html","searchKeys":["DefinedMacro","data class DefinedMacro(val macroId: String, val argumentsIdentifiers: List<String>, val value: Resolvable)","io.github.subjekt.core.definition.DefinedMacro"]},{"name":"data class DefinedParameter(val parameterId: String, val value: String, val originalParameter: Parameter? = null)","description":"io.github.subjekt.core.definition.DefinedParameter","location":"subjekt/io.github.subjekt.core.definition/-defined-parameter/index.html","searchKeys":["DefinedParameter","data class DefinedParameter(val parameterId: String, val value: String, val originalParameter: Parameter? = null)","io.github.subjekt.core.definition.DefinedParameter"]},{"name":"data class Error(val line: Int) : IrNode","description":"io.github.subjekt.compiler.expressions.ir.Error","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-error/index.html","searchKeys":["Error","data class Error(val line: Int) : IrNode","io.github.subjekt.compiler.expressions.ir.Error"]},{"name":"data class Instance(val value: String, val origin: Resolvable)","description":"io.github.subjekt.core.resolution.Instance","location":"subjekt/io.github.subjekt.core.resolution/-instance/index.html","searchKeys":["Instance","data class Instance(val value: String, val origin: Resolvable)","io.github.subjekt.core.resolution.Instance"]},{"name":"data class IrBinaryOperation(val left: IrNode, val right: IrNode, val operator: BinaryOperator, val line: Int) : IrAtomicNode","description":"io.github.subjekt.compiler.expressions.ir.IrBinaryOperation","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-binary-operation/index.html","searchKeys":["IrBinaryOperation","data class IrBinaryOperation(val left: IrNode, val right: IrNode, val operator: BinaryOperator, val line: Int) : IrAtomicNode","io.github.subjekt.compiler.expressions.ir.IrBinaryOperation"]},{"name":"data class IrCall(val identifier: String, val arguments: List<IrNode>, val line: Int) : IrIdentified","description":"io.github.subjekt.compiler.expressions.ir.IrCall","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-call/index.html","searchKeys":["IrCall","data class IrCall(val identifier: String, val arguments: List<IrNode>, val line: Int) : IrIdentified","io.github.subjekt.compiler.expressions.ir.IrCall"]},{"name":"data class IrCast(var value: IrNode?, val targetType: IrNativeType, val line: Int = -1) : IrAtomicNode","description":"io.github.subjekt.compiler.expressions.ir.IrCast","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-cast/index.html","searchKeys":["IrCast","data class IrCast(var value: IrNode?, val targetType: IrNativeType, val line: Int = -1) : IrAtomicNode","io.github.subjekt.compiler.expressions.ir.IrCast"]},{"name":"data class IrDotCall(val receiver: IrNode, val callId: String, val arguments: List<IrNode>, val line: Int) : IrIdentified","description":"io.github.subjekt.compiler.expressions.ir.IrDotCall","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-dot-call/index.html","searchKeys":["IrDotCall","data class IrDotCall(val receiver: IrNode, val callId: String, val arguments: List<IrNode>, val line: Int) : IrIdentified","io.github.subjekt.compiler.expressions.ir.IrDotCall"]},{"name":"data class IrEndOfSlice(val line: Int = -1) : IrAtomicNode","description":"io.github.subjekt.compiler.expressions.ir.IrEndOfSlice","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-end-of-slice/index.html","searchKeys":["IrEndOfSlice","data class IrEndOfSlice(val line: Int = -1) : IrAtomicNode","io.github.subjekt.compiler.expressions.ir.IrEndOfSlice"]},{"name":"data class IrFloatLiteral(val value: Double, val line: Int) : IrLiteral","description":"io.github.subjekt.compiler.expressions.ir.IrFloatLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-float-literal/index.html","searchKeys":["IrFloatLiteral","data class IrFloatLiteral(val value: Double, val line: Int) : IrLiteral","io.github.subjekt.compiler.expressions.ir.IrFloatLiteral"]},{"name":"data class IrIntegerLiteral(val value: Int, val line: Int) : IrLiteral","description":"io.github.subjekt.compiler.expressions.ir.IrIntegerLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-integer-literal/index.html","searchKeys":["IrIntegerLiteral","data class IrIntegerLiteral(val value: Int, val line: Int) : IrLiteral","io.github.subjekt.compiler.expressions.ir.IrIntegerLiteral"]},{"name":"data class IrParameter(val identifier: String, val line: Int) : IrIdentified","description":"io.github.subjekt.compiler.expressions.ir.IrParameter","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-parameter/index.html","searchKeys":["IrParameter","data class IrParameter(val identifier: String, val line: Int) : IrIdentified","io.github.subjekt.compiler.expressions.ir.IrParameter"]},{"name":"data class IrRangeSlice(val identifier: String, val start: IrAtomicNode = IrIntegerLiteral(0, -1), val end: IrAtomicNode = IrEndOfSlice(-1), val step: IrAtomicNode = IrIntegerLiteral(1, -1), var symbol: SliceSymbol? = null, val line: Int = -1) : IrResolvableNode","description":"io.github.subjekt.compiler.expressions.ir.IrRangeSlice","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-range-slice/index.html","searchKeys":["IrRangeSlice","data class IrRangeSlice(val identifier: String, val start: IrAtomicNode = IrIntegerLiteral(0, -1), val end: IrAtomicNode = IrEndOfSlice(-1), val step: IrAtomicNode = IrIntegerLiteral(1, -1), var symbol: SliceSymbol? = null, val line: Int = -1) : IrResolvableNode","io.github.subjekt.compiler.expressions.ir.IrRangeSlice"]},{"name":"data class IrSingleSlice(val identifier: String, val indexExpression: IrNode, val line: Int = -1) : IrIdentified","description":"io.github.subjekt.compiler.expressions.ir.IrSingleSlice","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-single-slice/index.html","searchKeys":["IrSingleSlice","data class IrSingleSlice(val identifier: String, val indexExpression: IrNode, val line: Int = -1) : IrIdentified","io.github.subjekt.compiler.expressions.ir.IrSingleSlice"]},{"name":"data class IrStringLiteral(val value: String, val line: Int) : IrLiteral","description":"io.github.subjekt.compiler.expressions.ir.IrStringLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-string-literal/index.html","searchKeys":["IrStringLiteral","data class IrStringLiteral(val value: String, val line: Int) : IrLiteral","io.github.subjekt.compiler.expressions.ir.IrStringLiteral"]},{"name":"data class IrTree(val node: IrNode) : IrNode","description":"io.github.subjekt.compiler.expressions.ir.IrTree","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-tree/index.html","searchKeys":["IrTree","data class IrTree(val node: IrNode) : IrNode","io.github.subjekt.compiler.expressions.ir.IrTree"]},{"name":"data class IrUnaryOperation(val operator: UnaryOperator, val operand: IrNode, val line: Int = -1) : IrAtomicNode","description":"io.github.subjekt.compiler.expressions.ir.IrUnaryOperation","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-unary-operation/index.html","searchKeys":["IrUnaryOperation","data class IrUnaryOperation(val operator: UnaryOperator, val operand: IrNode, val line: Int = -1) : IrAtomicNode","io.github.subjekt.compiler.expressions.ir.IrUnaryOperation"]},{"name":"data class Macro(val id: String, val argumentsIdentifiers: List<String>, val resolvables: List<Resolvable>) : Symbol","description":"io.github.subjekt.core.Macro","location":"subjekt/io.github.subjekt.core/-macro/index.html","searchKeys":["Macro","data class Macro(val id: String, val argumentsIdentifiers: List<String>, val resolvables: List<Resolvable>) : Symbol","io.github.subjekt.core.Macro"]},{"name":"data class Message(val type: MessageCollector.MessageType, val message: String)","description":"io.github.subjekt.utils.MessageCollector.Message","location":"subjekt/io.github.subjekt.utils/-message-collector/-message/index.html","searchKeys":["Message","data class Message(val type: MessageCollector.MessageType, val message: String)","io.github.subjekt.utils.MessageCollector.Message"]},{"name":"data class Module(val id: String, val symbolTable: SymbolTable, val path: String?)","description":"io.github.subjekt.core.Module","location":"subjekt/io.github.subjekt.core/-module/index.html","searchKeys":["Module","data class Module(val id: String, val symbolTable: SymbolTable, val path: String?)","io.github.subjekt.core.Module"]},{"name":"data class Parameter(val id: String, val values: List<String>) : Symbol","description":"io.github.subjekt.core.Parameter","location":"subjekt/io.github.subjekt.core/-parameter/index.html","searchKeys":["Parameter","data class Parameter(val id: String, val values: List<String>) : Symbol","io.github.subjekt.core.Parameter"]},{"name":"data class ParameterSymbol(val id: String) : ResolvableSymbol","description":"io.github.subjekt.compiler.expressions.ParameterSymbol","location":"subjekt/io.github.subjekt.compiler.expressions/-parameter-symbol/index.html","searchKeys":["ParameterSymbol","data class ParameterSymbol(val id: String) : ResolvableSymbol","io.github.subjekt.compiler.expressions.ParameterSymbol"]},{"name":"data class Position(val line: Int = -1, val charPositionInLine: Int = -1)","description":"io.github.subjekt.utils.MessageCollector.Position","location":"subjekt/io.github.subjekt.utils/-message-collector/-position/index.html","searchKeys":["Position","data class Position(val line: Int = -1, val charPositionInLine: Int = -1)","io.github.subjekt.utils.MessageCollector.Position"]},{"name":"data class QualifiedCallSymbol(val receiver: IrNode, val id: String, val nArgs: Int) : CallableSymbol","description":"io.github.subjekt.compiler.expressions.QualifiedCallSymbol","location":"subjekt/io.github.subjekt.compiler.expressions/-qualified-call-symbol/index.html","searchKeys":["QualifiedCallSymbol","data class QualifiedCallSymbol(val receiver: IrNode, val id: String, val nArgs: Int) : CallableSymbol","io.github.subjekt.compiler.expressions.QualifiedCallSymbol"]},{"name":"data class ResolvedSubject(val subjectId: Int, val instances: Map<String, Instance>)","description":"io.github.subjekt.core.resolution.ResolvedSubject","location":"subjekt/io.github.subjekt.core.resolution/-resolved-subject/index.html","searchKeys":["ResolvedSubject","data class ResolvedSubject(val subjectId: Int, val instances: Map<String, Instance>)","io.github.subjekt.core.resolution.ResolvedSubject"]},{"name":"data class ResolvedSuite(val originalSuite: Suite, val resolvedSubjects: Set<ResolvedSubject>)","description":"io.github.subjekt.core.resolution.ResolvedSuite","location":"subjekt/io.github.subjekt.core.resolution/-resolved-suite/index.html","searchKeys":["ResolvedSuite","data class ResolvedSuite(val originalSuite: Suite, val resolvedSubjects: Set<ResolvedSubject>)","io.github.subjekt.core.resolution.ResolvedSuite"]},{"name":"data class SliceSymbol(val parameter: ParameterSymbol, val startIndex: Int = 0, val endIndex: Int? = null, val stepIndex: Int = 1) : ResolvableSymbol","description":"io.github.subjekt.compiler.expressions.SliceSymbol","location":"subjekt/io.github.subjekt.compiler.expressions/-slice-symbol/index.html","searchKeys":["SliceSymbol","data class SliceSymbol(val parameter: ParameterSymbol, val startIndex: Int = 0, val endIndex: Int? = null, val stepIndex: Int = 1) : ResolvableSymbol","io.github.subjekt.compiler.expressions.SliceSymbol"]},{"name":"data class Subject(val id: Int, val resolvables: Map<String, Resolvable>, val symbolTable: SymbolTable = SymbolTable())","description":"io.github.subjekt.core.Subject","location":"subjekt/io.github.subjekt.core/-subject/index.html","searchKeys":["Subject","data class Subject(val id: Int, val resolvables: Map<String, Resolvable>, val symbolTable: SymbolTable = SymbolTable())","io.github.subjekt.core.Subject"]},{"name":"data class SubjektFunction(val id: String, function: (List<String>) -> String) : Symbol","description":"io.github.subjekt.core.SubjektFunction","location":"subjekt/io.github.subjekt.core/-subjekt-function/index.html","searchKeys":["SubjektFunction","data class SubjektFunction(val id: String, function: (List<String>) -> String) : Symbol","io.github.subjekt.core.SubjektFunction"]},{"name":"data class Suite(val id: String, val symbolTable: SymbolTable, val subjects: List<Subject>, val configuration: Configuration)","description":"io.github.subjekt.core.Suite","location":"subjekt/io.github.subjekt.core/-suite/index.html","searchKeys":["Suite","data class Suite(val id: String, val symbolTable: SymbolTable, val subjects: List<Subject>, val configuration: Configuration)","io.github.subjekt.core.Suite"]},{"name":"data class SymbolTable","description":"io.github.subjekt.core.SymbolTable","location":"subjekt/io.github.subjekt.core/-symbol-table/index.html","searchKeys":["SymbolTable","data class SymbolTable","io.github.subjekt.core.SymbolTable"]},{"name":"enum BinaryOperator : Enum<BinaryOperator> ","description":"io.github.subjekt.compiler.expressions.ir.BinaryOperator","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-binary-operator/index.html","searchKeys":["BinaryOperator","enum BinaryOperator : Enum<BinaryOperator> ","io.github.subjekt.compiler.expressions.ir.BinaryOperator"]},{"name":"enum IrNativeType : Enum<IrNativeType> ","description":"io.github.subjekt.compiler.expressions.ir.IrNativeType","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-native-type/index.html","searchKeys":["IrNativeType","enum IrNativeType : Enum<IrNativeType> ","io.github.subjekt.compiler.expressions.ir.IrNativeType"]},{"name":"enum MessageType : Enum<MessageCollector.MessageType> ","description":"io.github.subjekt.utils.MessageCollector.MessageType","location":"subjekt/io.github.subjekt.utils/-message-collector/-message-type/index.html","searchKeys":["MessageType","enum MessageType : Enum<MessageCollector.MessageType> ","io.github.subjekt.utils.MessageCollector.MessageType"]},{"name":"enum Type : Enum<Type> ","description":"io.github.subjekt.compiler.expressions.ir.Type","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-type/index.html","searchKeys":["Type","enum Type : Enum<Type> ","io.github.subjekt.compiler.expressions.ir.Type"]},{"name":"enum UnaryOperator : Enum<UnaryOperator> ","description":"io.github.subjekt.compiler.expressions.ir.UnaryOperator","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-unary-operator/index.html","searchKeys":["UnaryOperator","enum UnaryOperator : Enum<UnaryOperator> ","io.github.subjekt.compiler.expressions.ir.UnaryOperator"]},{"name":"expect fun String.writeTo(path: String, append: Boolean = true): Result<Unit>","description":"io.github.subjekt.files.writeTo","location":"subjekt/io.github.subjekt.files/write-to.html","searchKeys":["writeTo","expect fun String.writeTo(path: String, append: Boolean = true): Result<Unit>","io.github.subjekt.files.writeTo"]},{"name":"fun <I, R> createJsonExporter(singleSerializer: KSerializer<I>, reduceSerializer: KSerializer<R>, contentResolver: (ResolvedSubject) -> I, reduce: (List<I>) -> R, nameResolver: (ResolvedSubject) -> String = safeNameResolverUniqueFallback): Exporter<I, R>","description":"io.github.subjekt.createJsonExporter","location":"subjekt/io.github.subjekt/create-json-exporter.html","searchKeys":["createJsonExporter","fun <I, R> createJsonExporter(singleSerializer: KSerializer<I>, reduceSerializer: KSerializer<R>, contentResolver: (ResolvedSubject) -> I, reduce: (List<I>) -> R, nameResolver: (ResolvedSubject) -> String = safeNameResolverUniqueFallback): Exporter<I, R>","io.github.subjekt.createJsonExporter"]},{"name":"fun <I, R> mapAndExport(mapper: Mapper, exporter: Exporter<I, R>): SubjektResult<I, R>?","description":"io.github.subjekt.AbstractSubjekt.mapAndExport","location":"subjekt/io.github.subjekt/-abstract-subjekt/map-and-export.html","searchKeys":["mapAndExport","fun <I, R> mapAndExport(mapper: Mapper, exporter: Exporter<I, R>): SubjektResult<I, R>?","io.github.subjekt.AbstractSubjekt.mapAndExport"]},{"name":"fun <T> accept(irVisitor: IrVisitor<T>): T","description":"io.github.subjekt.compiler.expressions.ir.IrNode.accept","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-node/accept.html","searchKeys":["accept","fun <T> accept(irVisitor: IrVisitor<T>): T","io.github.subjekt.compiler.expressions.ir.IrNode.accept"]},{"name":"fun Context.callSymbol(symbol: CallableSymbol, arguments: List<String>): String","description":"io.github.subjekt.compiler.expressions.ir.utils.IrUtils.callSymbol","location":"subjekt/io.github.subjekt.compiler.expressions.ir.utils/-ir-utils/call-symbol.html","searchKeys":["callSymbol","fun Context.callSymbol(symbol: CallableSymbol, arguments: List<String>): String","io.github.subjekt.compiler.expressions.ir.utils.IrUtils.callSymbol"]},{"name":"fun DefinedMacro.call(context: Context, arguments: List<String>): String","description":"io.github.subjekt.compiler.expressions.ir.utils.IrUtils.call","location":"subjekt/io.github.subjekt.compiler.expressions.ir.utils/-ir-utils/call.html","searchKeys":["call","fun DefinedMacro.call(context: Context, arguments: List<String>): String","io.github.subjekt.compiler.expressions.ir.utils.IrUtils.call"]},{"name":"fun IrCall.resolveCall(context: Context, visitMethod: (IrNode) -> String): String","description":"io.github.subjekt.compiler.expressions.ir.utils.IrUtils.resolveCall","location":"subjekt/io.github.subjekt.compiler.expressions.ir.utils/-ir-utils/resolve-call.html","searchKeys":["resolveCall","fun IrCall.resolveCall(context: Context, visitMethod: (IrNode) -> String): String","io.github.subjekt.compiler.expressions.ir.utils.IrUtils.resolveCall"]},{"name":"fun IrCall.toCallSymbol(): CallSymbol","description":"io.github.subjekt.compiler.expressions.toCallSymbol","location":"subjekt/io.github.subjekt.compiler.expressions/to-call-symbol.html","searchKeys":["toCallSymbol","fun IrCall.toCallSymbol(): CallSymbol","io.github.subjekt.compiler.expressions.toCallSymbol"]},{"name":"fun IrDotCall.toQualifiedCallSymbol(): QualifiedCallSymbol","description":"io.github.subjekt.compiler.expressions.toQualifiedCallSymbol","location":"subjekt/io.github.subjekt.compiler.expressions/to-qualified-call-symbol.html","searchKeys":["toQualifiedCallSymbol","fun IrDotCall.toQualifiedCallSymbol(): QualifiedCallSymbol","io.github.subjekt.compiler.expressions.toQualifiedCallSymbol"]},{"name":"fun IrParameter.toParameterSymbol(): ParameterSymbol","description":"io.github.subjekt.compiler.expressions.toParameterSymbol","location":"subjekt/io.github.subjekt.compiler.expressions/to-parameter-symbol.html","searchKeys":["toParameterSymbol","fun IrParameter.toParameterSymbol(): ParameterSymbol","io.github.subjekt.compiler.expressions.toParameterSymbol"]},{"name":"fun IrRangeSlice.toParameterSymbol(): ParameterSymbol","description":"io.github.subjekt.compiler.expressions.toParameterSymbol","location":"subjekt/io.github.subjekt.compiler.expressions/to-parameter-symbol.html","searchKeys":["toParameterSymbol","fun IrRangeSlice.toParameterSymbol(): ParameterSymbol","io.github.subjekt.compiler.expressions.toParameterSymbol"]},{"name":"fun IrSingleSlice.toParameterSymbol(): ParameterSymbol","description":"io.github.subjekt.compiler.expressions.toParameterSymbol","location":"subjekt/io.github.subjekt.compiler.expressions/to-parameter-symbol.html","searchKeys":["toParameterSymbol","fun IrSingleSlice.toParameterSymbol(): ParameterSymbol","io.github.subjekt.compiler.expressions.toParameterSymbol"]},{"name":"fun MacroDefinition.toActualMacro(resolvables: List<Resolvable>): Macro","description":"io.github.subjekt.core.Macro.Companion.toActualMacro","location":"subjekt/io.github.subjekt.core/-macro/-companion/to-actual-macro.html","searchKeys":["toActualMacro","fun MacroDefinition.toActualMacro(resolvables: List<Resolvable>): Macro","io.github.subjekt.core.Macro.Companion.toActualMacro"]},{"name":"fun Map<String, Resolvable>.resolve(context: Context): Map<String, Instance>","description":"io.github.subjekt.compiler.resolve","location":"subjekt/io.github.subjekt.compiler/resolve.html","searchKeys":["resolve","fun Map<String, Resolvable>.resolve(context: Context): Map<String, Instance>","io.github.subjekt.compiler.resolve"]},{"name":"fun Pair<String, List<*>>.toParameter(): Parameter","description":"io.github.subjekt.core.Parameter.Companion.toParameter","location":"subjekt/io.github.subjekt.core/-parameter/-companion/to-parameter.html","searchKeys":["toParameter","fun Pair<String, List<*>>.toParameter(): Parameter","io.github.subjekt.core.Parameter.Companion.toParameter"]},{"name":"fun Pair<String, String>.toSingleValueParameter(): Parameter","description":"io.github.subjekt.core.Parameter.Companion.toSingleValueParameter","location":"subjekt/io.github.subjekt.core/-parameter/-companion/to-single-value-parameter.html","searchKeys":["toSingleValueParameter","fun Pair<String, String>.toSingleValueParameter(): Parameter","io.github.subjekt.core.Parameter.Companion.toSingleValueParameter"]},{"name":"fun SliceSymbol.view(parameter: Parameter): Parameter","description":"io.github.subjekt.compiler.expressions.slices.SliceEngine.view","location":"subjekt/io.github.subjekt.compiler.expressions.slices/-slice-engine/view.html","searchKeys":["view","fun SliceSymbol.view(parameter: Parameter): Parameter","io.github.subjekt.compiler.expressions.slices.SliceEngine.view"]},{"name":"fun Source.parseIntoSuite(initialSymbolTable: SymbolTable = SymbolTable()): Result<Suite>","description":"io.github.subjekt.core.parsing.SuiteFactory.parseIntoSuite","location":"subjekt/io.github.subjekt.core.parsing/-suite-factory/parse-into-suite.html","searchKeys":["parseIntoSuite","fun Source.parseIntoSuite(initialSymbolTable: SymbolTable = SymbolTable()): Result<Suite>","io.github.subjekt.core.parsing.SuiteFactory.parseIntoSuite"]},{"name":"fun String.asMacro(resolvable: List<Resolvable>): Macro","description":"io.github.subjekt.core.Macro.Companion.asMacro","location":"subjekt/io.github.subjekt.core/-macro/-companion/as-macro.html","searchKeys":["asMacro","fun String.asMacro(resolvable: List<Resolvable>): Macro","io.github.subjekt.core.Macro.Companion.asMacro"]},{"name":"fun Subject.requestNeededContexts(): List<Context>","description":"io.github.subjekt.compiler.permutations.requestNeededContexts","location":"subjekt/io.github.subjekt.compiler.permutations/request-needed-contexts.html","searchKeys":["requestNeededContexts","fun Subject.requestNeededContexts(): List<Context>","io.github.subjekt.compiler.permutations.requestNeededContexts"]},{"name":"fun Subject.resolve(): Set<ResolvedSubject>","description":"io.github.subjekt.compiler.resolve","location":"subjekt/io.github.subjekt.compiler/resolve.html","searchKeys":["resolve","fun Subject.resolve(): Set<ResolvedSubject>","io.github.subjekt.compiler.resolve"]},{"name":"fun Suite.resolve(): ResolvedSuite","description":"io.github.subjekt.compiler.resolve","location":"subjekt/io.github.subjekt.compiler/resolve.html","searchKeys":["resolve","fun Suite.resolve(): ResolvedSuite","io.github.subjekt.compiler.resolve"]},{"name":"fun asString(): String","description":"io.github.subjekt.core.resolution.SubjektResult.asString","location":"subjekt/io.github.subjekt.core.resolution/-subjekt-result/as-string.html","searchKeys":["asString","fun asString(): String","io.github.subjekt.core.resolution.SubjektResult.asString"]},{"name":"fun asStrings(): List<String>","description":"io.github.subjekt.core.resolution.SubjektResult.asStrings","location":"subjekt/io.github.subjekt.core.resolution/-subjekt-result/as-strings.html","searchKeys":["asStrings","fun asStrings(): List<String>","io.github.subjekt.core.resolution.SubjektResult.asStrings"]},{"name":"fun capitalizeFirst(str: List<String>): String","description":"io.github.subjekt.capitalizeFirst","location":"subjekt/io.github.subjekt/capitalize-first.html","searchKeys":["capitalizeFirst","fun capitalizeFirst(str: List<String>): String","io.github.subjekt.capitalizeFirst"]},{"name":"fun cleanName(name: String): String","description":"io.github.subjekt.files.cleanName","location":"subjekt/io.github.subjekt.files/clean-name.html","searchKeys":["cleanName","fun cleanName(name: String): String","io.github.subjekt.files.cleanName"]},{"name":"fun clone(): Configuration","description":"io.github.subjekt.core.Configuration.clone","location":"subjekt/io.github.subjekt.core/-configuration/clone.html","searchKeys":["clone","fun clone(): Configuration","io.github.subjekt.core.Configuration.clone"]},{"name":"fun customFunction(id: String, function: (List<String>) -> String): Subjekt","description":"io.github.subjekt.Subjekt.customFunction","location":"subjekt/io.github.subjekt/[js]-subjekt/custom-function.html","searchKeys":["customFunction","fun customFunction(id: String, function: (List<String>) -> String): Subjekt","io.github.subjekt.Subjekt.customFunction"]},{"name":"fun customFunctions(functions: List<SubjektFunction>): Subjekt","description":"io.github.subjekt.Subjekt.customFunctions","location":"subjekt/io.github.subjekt/[jvm]-subjekt/custom-functions.html","searchKeys":["customFunctions","fun customFunctions(functions: List<SubjektFunction>): Subjekt","io.github.subjekt.Subjekt.customFunctions"]},{"name":"fun customMacro(id: String, argumentsIdentifiers: Array<String>, values: Array<String>): Subjekt","description":"io.github.subjekt.Subjekt.customMacro","location":"subjekt/io.github.subjekt/[js]-subjekt/custom-macro.html","searchKeys":["customMacro","fun customMacro(id: String, argumentsIdentifiers: Array<String>, values: Array<String>): Subjekt","io.github.subjekt.Subjekt.customMacro"]},{"name":"fun customMacro(id: String, argumentsIdentifiers: List<String>, values: List<Resolvable>): Subjekt","description":"io.github.subjekt.Subjekt.customMacro","location":"subjekt/io.github.subjekt/[jvm]-subjekt/custom-macro.html","searchKeys":["customMacro","fun customMacro(id: String, argumentsIdentifiers: List<String>, values: List<Resolvable>): Subjekt","io.github.subjekt.Subjekt.customMacro"]},{"name":"fun customMacros(macros: List<Macro>): Subjekt","description":"io.github.subjekt.Subjekt.customMacros","location":"subjekt/io.github.subjekt/[jvm]-subjekt/custom-macros.html","searchKeys":["customMacros","fun customMacros(macros: List<Macro>): Subjekt","io.github.subjekt.Subjekt.customMacros"]},{"name":"fun customParameter(id: String, values: Array<String>): Subjekt","description":"io.github.subjekt.Subjekt.customParameter","location":"subjekt/io.github.subjekt/[js]-subjekt/custom-parameter.html","searchKeys":["customParameter","fun customParameter(id: String, values: Array<String>): Subjekt","io.github.subjekt.Subjekt.customParameter"]},{"name":"fun customParameter(id: String, values: List<String>): Subjekt","description":"io.github.subjekt.Subjekt.customParameter","location":"subjekt/io.github.subjekt/[jvm]-subjekt/custom-parameter.html","searchKeys":["customParameter","fun customParameter(id: String, values: List<String>): Subjekt","io.github.subjekt.Subjekt.customParameter"]},{"name":"fun customParameters(parameters: List<Parameter>): Subjekt","description":"io.github.subjekt.Subjekt.customParameters","location":"subjekt/io.github.subjekt/[jvm]-subjekt/custom-parameters.html","searchKeys":["customParameters","fun customParameters(parameters: List<Parameter>): Subjekt","io.github.subjekt.Subjekt.customParameters"]},{"name":"fun defineFunction(id: String, function: (List<String>) -> String): SymbolTable","description":"io.github.subjekt.core.SymbolTable.defineFunction","location":"subjekt/io.github.subjekt.core/-symbol-table/define-function.html","searchKeys":["defineFunction","fun defineFunction(id: String, function: (List<String>) -> String): SymbolTable","io.github.subjekt.core.SymbolTable.defineFunction"]},{"name":"fun defineFunctions(functions: List<SubjektFunction>): SymbolTable","description":"io.github.subjekt.core.SymbolTable.defineFunctions","location":"subjekt/io.github.subjekt.core/-symbol-table/define-functions.html","searchKeys":["defineFunctions","fun defineFunctions(functions: List<SubjektFunction>): SymbolTable","io.github.subjekt.core.SymbolTable.defineFunctions"]},{"name":"fun defineMacro(macro: Macro): SymbolTable","description":"io.github.subjekt.core.SymbolTable.defineMacro","location":"subjekt/io.github.subjekt.core/-symbol-table/define-macro.html","searchKeys":["defineMacro","fun defineMacro(macro: Macro): SymbolTable","io.github.subjekt.core.SymbolTable.defineMacro"]},{"name":"fun defineMacros(macros: List<Macro>): SymbolTable","description":"io.github.subjekt.core.SymbolTable.defineMacros","location":"subjekt/io.github.subjekt.core/-symbol-table/define-macros.html","searchKeys":["defineMacros","fun defineMacros(macros: List<Macro>): SymbolTable","io.github.subjekt.core.SymbolTable.defineMacros"]},{"name":"fun defineParameter(parameter: Parameter): SymbolTable","description":"io.github.subjekt.core.SymbolTable.defineParameter","location":"subjekt/io.github.subjekt.core/-symbol-table/define-parameter.html","searchKeys":["defineParameter","fun defineParameter(parameter: Parameter): SymbolTable","io.github.subjekt.core.SymbolTable.defineParameter"]},{"name":"fun defineParameters(parameters: List<Parameter>): SymbolTable","description":"io.github.subjekt.core.SymbolTable.defineParameters","location":"subjekt/io.github.subjekt.core/-symbol-table/define-parameters.html","searchKeys":["defineParameters","fun defineParameters(parameters: List<Parameter>): SymbolTable","io.github.subjekt.core.SymbolTable.defineParameters"]},{"name":"fun error(preprocess: (String) -> String = { it }, message: () -> String)","description":"io.github.subjekt.utils.Logger.error","location":"subjekt/io.github.subjekt.utils/-logger/error.html","searchKeys":["error","fun error(preprocess: (String) -> String = { it }, message: () -> String)","io.github.subjekt.utils.Logger.error"]},{"name":"fun fromJson(json: String): Subjekt","description":"io.github.subjekt.Subjekt.Companion.fromJson","location":"subjekt/io.github.subjekt/[js]-subjekt/-companion/from-json.html","searchKeys":["fromJson","fun fromJson(json: String): Subjekt","io.github.subjekt.Subjekt.Companion.fromJson"]},{"name":"fun fromJson(json: String): Subjekt","description":"io.github.subjekt.Subjekt.Companion.fromJson","location":"subjekt/io.github.subjekt/[jvm]-subjekt/-companion/from-json.html","searchKeys":["fromJson","fun fromJson(json: String): Subjekt","io.github.subjekt.Subjekt.Companion.fromJson"]},{"name":"fun fromJson(text: String): Source","description":"io.github.subjekt.core.Source.Companion.fromJson","location":"subjekt/io.github.subjekt.core/-source/-companion/from-json.html","searchKeys":["fromJson","fun fromJson(text: String): Source","io.github.subjekt.core.Source.Companion.fromJson"]},{"name":"fun fromYaml(text: String): Source","description":"io.github.subjekt.core.Source.Companion.fromYaml","location":"subjekt/io.github.subjekt.core/-source/-companion/from-yaml.html","searchKeys":["fromYaml","fun fromYaml(text: String): Source","io.github.subjekt.core.Source.Companion.fromYaml"]},{"name":"fun fromYaml(yaml: String): Subjekt","description":"io.github.subjekt.Subjekt.Companion.fromYaml","location":"subjekt/io.github.subjekt/[js]-subjekt/-companion/from-yaml.html","searchKeys":["fromYaml","fun fromYaml(yaml: String): Subjekt","io.github.subjekt.Subjekt.Companion.fromYaml"]},{"name":"fun fromYaml(yaml: String): Subjekt","description":"io.github.subjekt.Subjekt.Companion.fromYaml","location":"subjekt/io.github.subjekt/[jvm]-subjekt/-companion/from-yaml.html","searchKeys":["fromYaml","fun fromYaml(yaml: String): Subjekt","io.github.subjekt.Subjekt.Companion.fromYaml"]},{"name":"fun getGenerationGraph(): SubjektResult<Pair<Int, String>, Map<Int, List<String>>>?","description":"io.github.subjekt.Subjekt.getGenerationGraph","location":"subjekt/io.github.subjekt/[jvm]-subjekt/get-generation-graph.html","searchKeys":["getGenerationGraph","fun getGenerationGraph(): SubjektResult<Pair<Int, String>, Map<Int, List<String>>>?","io.github.subjekt.Subjekt.getGenerationGraph"]},{"name":"fun getGenerationGraph(): SubjektResult<dynamic, Map<Int, List<String>>>?","description":"io.github.subjekt.Subjekt.getGenerationGraph","location":"subjekt/io.github.subjekt/[js]-subjekt/get-generation-graph.html","searchKeys":["getGenerationGraph","fun getGenerationGraph(): SubjektResult<dynamic, Map<Int, List<String>>>?","io.github.subjekt.Subjekt.getGenerationGraph"]},{"name":"fun getResolvedSuite(): ResolvedSuite?","description":"io.github.subjekt.Subjekt.getResolvedSuite","location":"subjekt/io.github.subjekt/[js]-subjekt/get-resolved-suite.html","searchKeys":["getResolvedSuite","fun getResolvedSuite(): ResolvedSuite?","io.github.subjekt.Subjekt.getResolvedSuite"]},{"name":"fun hasErrors(): Boolean","description":"io.github.subjekt.utils.MessageCollector.hasErrors","location":"subjekt/io.github.subjekt.utils/-message-collector/has-errors.html","searchKeys":["hasErrors","fun hasErrors(): Boolean","io.github.subjekt.utils.MessageCollector.hasErrors"]},{"name":"fun interface Exporter<I, R>","description":"io.github.subjekt.core.resolution.Exporter","location":"subjekt/io.github.subjekt.core.resolution/-exporter/index.html","searchKeys":["Exporter","fun interface Exporter<I, R>","io.github.subjekt.core.resolution.Exporter"]},{"name":"fun interface Mapper","description":"io.github.subjekt.core.resolution.Mapper","location":"subjekt/io.github.subjekt.core.resolution/-mapper/index.html","searchKeys":["Mapper","fun interface Mapper","io.github.subjekt.core.resolution.Mapper"]},{"name":"fun lookupFunction(id: String): SubjektFunction?","description":"io.github.subjekt.core.definition.Context.lookupFunction","location":"subjekt/io.github.subjekt.core.definition/-context/lookup-function.html","searchKeys":["lookupFunction","fun lookupFunction(id: String): SubjektFunction?","io.github.subjekt.core.definition.Context.lookupFunction"]},{"name":"fun lookupMacro(id: String, nArgs: Int = 0): DefinedMacro?","description":"io.github.subjekt.core.definition.Context.lookupMacro","location":"subjekt/io.github.subjekt.core.definition/-context/lookup-macro.html","searchKeys":["lookupMacro","fun lookupMacro(id: String, nArgs: Int = 0): DefinedMacro?","io.github.subjekt.core.definition.Context.lookupMacro"]},{"name":"fun lookupParameter(id: String): DefinedParameter?","description":"io.github.subjekt.core.definition.Context.lookupParameter","location":"subjekt/io.github.subjekt.core.definition/-context/lookup-parameter.html","searchKeys":["lookupParameter","fun lookupParameter(id: String): DefinedParameter?","io.github.subjekt.core.definition.Context.lookupParameter"]},{"name":"fun prettify(arguments: List<String>): String","description":"io.github.subjekt.prettify","location":"subjekt/io.github.subjekt/prettify.html","searchKeys":["prettify","fun prettify(arguments: List<String>): String","io.github.subjekt.prettify"]},{"name":"fun readText(path: String): String?","description":"io.github.subjekt.files.readText","location":"subjekt/io.github.subjekt.files/read-text.html","searchKeys":["readText","fun readText(path: String): String?","io.github.subjekt.files.readText"]},{"name":"fun resolve(context: Context, log: Boolean = false): String","description":"io.github.subjekt.compiler.expressions.Expression.resolve","location":"subjekt/io.github.subjekt.compiler.expressions/-expression/resolve.html","searchKeys":["resolve","fun resolve(context: Context, log: Boolean = false): String","io.github.subjekt.compiler.expressions.Expression.resolve"]},{"name":"fun resolveDefinedMacro(context: Context): DefinedMacro?","description":"io.github.subjekt.compiler.expressions.CallableSymbol.resolveDefinedMacro","location":"subjekt/io.github.subjekt.compiler.expressions/-callable-symbol/resolve-defined-macro.html","searchKeys":["resolveDefinedMacro","fun resolveDefinedMacro(context: Context): DefinedMacro?","io.github.subjekt.compiler.expressions.CallableSymbol.resolveDefinedMacro"]},{"name":"fun resolveDefinedParameter(context: Context): DefinedParameter","description":"io.github.subjekt.compiler.expressions.ParameterSymbol.resolveDefinedParameter","location":"subjekt/io.github.subjekt.compiler.expressions/-parameter-symbol/resolve-defined-parameter.html","searchKeys":["resolveDefinedParameter","fun resolveDefinedParameter(context: Context): DefinedParameter","io.github.subjekt.compiler.expressions.ParameterSymbol.resolveDefinedParameter"]},{"name":"fun resolveFunction(context: Context): SubjektFunction?","description":"io.github.subjekt.compiler.expressions.CallableSymbol.resolveFunction","location":"subjekt/io.github.subjekt.compiler.expressions/-callable-symbol/resolve-function.html","searchKeys":["resolveFunction","fun resolveFunction(context: Context): SubjektFunction?","io.github.subjekt.compiler.expressions.CallableSymbol.resolveFunction"]},{"name":"fun resolveFunction(id: String): SubjektFunction?","description":"io.github.subjekt.core.SymbolTable.resolveFunction","location":"subjekt/io.github.subjekt.core/-symbol-table/resolve-function.html","searchKeys":["resolveFunction","fun resolveFunction(id: String): SubjektFunction?","io.github.subjekt.core.SymbolTable.resolveFunction"]},{"name":"fun resolveMacro(id: String, argsNumber: Int = 0): Macro?","description":"io.github.subjekt.core.SymbolTable.resolveMacro","location":"subjekt/io.github.subjekt.core/-symbol-table/resolve-macro.html","searchKeys":["resolveMacro","fun resolveMacro(id: String, argsNumber: Int = 0): Macro?","io.github.subjekt.core.SymbolTable.resolveMacro"]},{"name":"fun resolveMacros(id: String): List<Macro>","description":"io.github.subjekt.core.SymbolTable.resolveMacros","location":"subjekt/io.github.subjekt.core/-symbol-table/resolve-macros.html","searchKeys":["resolveMacros","fun resolveMacros(id: String): List<Macro>","io.github.subjekt.core.SymbolTable.resolveMacros"]},{"name":"fun resolveParameter(id: String): Parameter?","description":"io.github.subjekt.core.SymbolTable.resolveParameter","location":"subjekt/io.github.subjekt.core/-symbol-table/resolve-parameter.html","searchKeys":["resolveParameter","fun resolveParameter(id: String): Parameter?","io.github.subjekt.core.SymbolTable.resolveParameter"]},{"name":"fun resolveSubjectsAsJson(): SubjektResult<Map<String, String>, List<Map<String, String>>>?","description":"io.github.subjekt.Subjekt.resolveSubjectsAsJson","location":"subjekt/io.github.subjekt/[js]-subjekt/resolve-subjects-as-json.html","searchKeys":["resolveSubjectsAsJson","fun resolveSubjectsAsJson(): SubjektResult<Map<String, String>, List<Map<String, String>>>?","io.github.subjekt.Subjekt.resolveSubjectsAsJson"]},{"name":"fun resolveToSymbol(symbolTable: SymbolTable): Symbol","description":"io.github.subjekt.compiler.expressions.ResolvableSymbol.resolveToSymbol","location":"subjekt/io.github.subjekt.compiler.expressions/-resolvable-symbol/resolve-to-symbol.html","searchKeys":["resolveToSymbol","fun resolveToSymbol(symbolTable: SymbolTable): Symbol","io.github.subjekt.compiler.expressions.ResolvableSymbol.resolveToSymbol"]},{"name":"fun safeNameResolverAsPlaceholder(placeholder: String): (ResolvedSubject) -> String","description":"io.github.subjekt.safeNameResolverAsPlaceholder","location":"subjekt/io.github.subjekt/safe-name-resolver-as-placeholder.html","searchKeys":["safeNameResolverAsPlaceholder","fun safeNameResolverAsPlaceholder(placeholder: String): (ResolvedSubject) -> String","io.github.subjekt.safeNameResolverAsPlaceholder"]},{"name":"fun set(key: String, value: Any): Boolean","description":"io.github.subjekt.core.Configuration.set","location":"subjekt/io.github.subjekt.core/-configuration/set.html","searchKeys":["set","fun set(key: String, value: Any): Boolean","io.github.subjekt.core.Configuration.set"]},{"name":"fun showInConsole()","description":"io.github.subjekt.utils.MessageCollector.showInConsole","location":"subjekt/io.github.subjekt.utils/-message-collector/show-in-console.html","searchKeys":["showInConsole","fun showInConsole()","io.github.subjekt.utils.MessageCollector.showInConsole"]},{"name":"fun showInConsole(message: MessageCollector.Message)","description":"io.github.subjekt.utils.MessageCollector.showInConsole","location":"subjekt/io.github.subjekt.utils/-message-collector/show-in-console.html","searchKeys":["showInConsole","fun showInConsole(message: MessageCollector.Message)","io.github.subjekt.utils.MessageCollector.showInConsole"]},{"name":"fun toFile(path: String): String?","description":"io.github.subjekt.core.resolution.SubjektResult.toFile","location":"subjekt/io.github.subjekt.core.resolution/-subjekt-result/to-file.html","searchKeys":["toFile","fun toFile(path: String): String?","io.github.subjekt.core.resolution.SubjektResult.toFile"]},{"name":"fun toFiles(directory: String): String?","description":"io.github.subjekt.core.resolution.SubjektResult.toFiles","location":"subjekt/io.github.subjekt.core.resolution/-subjekt-result/to-files.html","searchKeys":["toFiles","fun toFiles(directory: String): String?","io.github.subjekt.core.resolution.SubjektResult.toFiles"]},{"name":"fun valueOf(value: String): BinaryOperator","description":"io.github.subjekt.compiler.expressions.ir.BinaryOperator.valueOf","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-binary-operator/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): BinaryOperator","io.github.subjekt.compiler.expressions.ir.BinaryOperator.valueOf"]},{"name":"fun valueOf(value: String): IrNativeType","description":"io.github.subjekt.compiler.expressions.ir.IrNativeType.valueOf","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-native-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): IrNativeType","io.github.subjekt.compiler.expressions.ir.IrNativeType.valueOf"]},{"name":"fun valueOf(value: String): MessageCollector.MessageType","description":"io.github.subjekt.utils.MessageCollector.MessageType.valueOf","location":"subjekt/io.github.subjekt.utils/-message-collector/-message-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): MessageCollector.MessageType","io.github.subjekt.utils.MessageCollector.MessageType.valueOf"]},{"name":"fun valueOf(value: String): Type","description":"io.github.subjekt.compiler.expressions.ir.Type.valueOf","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Type","io.github.subjekt.compiler.expressions.ir.Type.valueOf"]},{"name":"fun valueOf(value: String): UnaryOperator","description":"io.github.subjekt.compiler.expressions.ir.UnaryOperator.valueOf","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-unary-operator/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): UnaryOperator","io.github.subjekt.compiler.expressions.ir.UnaryOperator.valueOf"]},{"name":"fun values(): Array<BinaryOperator>","description":"io.github.subjekt.compiler.expressions.ir.BinaryOperator.values","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-binary-operator/values.html","searchKeys":["values","fun values(): Array<BinaryOperator>","io.github.subjekt.compiler.expressions.ir.BinaryOperator.values"]},{"name":"fun values(): Array<IrNativeType>","description":"io.github.subjekt.compiler.expressions.ir.IrNativeType.values","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-native-type/values.html","searchKeys":["values","fun values(): Array<IrNativeType>","io.github.subjekt.compiler.expressions.ir.IrNativeType.values"]},{"name":"fun values(): Array<MessageCollector.MessageType>","description":"io.github.subjekt.utils.MessageCollector.MessageType.values","location":"subjekt/io.github.subjekt.utils/-message-collector/-message-type/values.html","searchKeys":["values","fun values(): Array<MessageCollector.MessageType>","io.github.subjekt.utils.MessageCollector.MessageType.values"]},{"name":"fun values(): Array<Type>","description":"io.github.subjekt.compiler.expressions.ir.Type.values","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-type/values.html","searchKeys":["values","fun values(): Array<Type>","io.github.subjekt.compiler.expressions.ir.Type.values"]},{"name":"fun values(): Array<UnaryOperator>","description":"io.github.subjekt.compiler.expressions.ir.UnaryOperator.values","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-unary-operator/values.html","searchKeys":["values","fun values(): Array<UnaryOperator>","io.github.subjekt.compiler.expressions.ir.UnaryOperator.values"]},{"name":"fun warning(preprocess: (String) -> String = { it }, message: () -> String)","description":"io.github.subjekt.utils.Logger.warning","location":"subjekt/io.github.subjekt.utils/-logger/warning.html","searchKeys":["warning","fun warning(preprocess: (String) -> String = { it }, message: () -> String)","io.github.subjekt.utils.Logger.warning"]},{"name":"fun withFunction(id: String, function: (List<String>) -> String): Context","description":"io.github.subjekt.core.definition.Context.withFunction","location":"subjekt/io.github.subjekt.core.definition/-context/with-function.html","searchKeys":["withFunction","fun withFunction(id: String, function: (List<String>) -> String): Context","io.github.subjekt.core.definition.Context.withFunction"]},{"name":"fun withMacro(id: String, argIds: List<String>, value: Resolvable): Context","description":"io.github.subjekt.core.definition.Context.withMacro","location":"subjekt/io.github.subjekt.core.definition/-context/with-macro.html","searchKeys":["withMacro","fun withMacro(id: String, argIds: List<String>, value: Resolvable): Context","io.github.subjekt.core.definition.Context.withMacro"]},{"name":"fun withMacros(vararg macros: DefinedMacro): Context","description":"io.github.subjekt.core.definition.Context.withMacros","location":"subjekt/io.github.subjekt.core.definition/-context/with-macros.html","searchKeys":["withMacros","fun withMacros(vararg macros: DefinedMacro): Context","io.github.subjekt.core.definition.Context.withMacros"]},{"name":"fun withParameter(id: String, value: String): Context","description":"io.github.subjekt.core.definition.Context.withParameter","location":"subjekt/io.github.subjekt.core.definition/-context/with-parameter.html","searchKeys":["withParameter","fun withParameter(id: String, value: String): Context","io.github.subjekt.core.definition.Context.withParameter"]},{"name":"fun withParameters(vararg parameters: DefinedParameter): Context","description":"io.github.subjekt.core.definition.Context.withParameters","location":"subjekt/io.github.subjekt.core.definition/-context/with-parameters.html","searchKeys":["withParameters","fun withParameters(vararg parameters: DefinedParameter): Context","io.github.subjekt.core.definition.Context.withParameters"]},{"name":"fun withParameters(vararg parameters: Pair<String, String>): Context","description":"io.github.subjekt.core.definition.Context.withParameters","location":"subjekt/io.github.subjekt.core.definition/-context/with-parameters.html","searchKeys":["withParameters","fun withParameters(vararg parameters: Pair<String, String>): Context","io.github.subjekt.core.definition.Context.withParameters"]},{"name":"interface IrVisitor<T>","description":"io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir/-ir-visitor/index.html","searchKeys":["IrVisitor","interface IrVisitor<T>","io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor"]},{"name":"object Companion","description":"io.github.subjekt.Subjekt.Companion","location":"subjekt/io.github.subjekt/[js]-subjekt/-companion/index.html","searchKeys":["Companion","object Companion","io.github.subjekt.Subjekt.Companion"]},{"name":"object Companion","description":"io.github.subjekt.Subjekt.Companion","location":"subjekt/io.github.subjekt/[jvm]-subjekt/-companion/index.html","searchKeys":["Companion","object Companion","io.github.subjekt.Subjekt.Companion"]},{"name":"object Companion","description":"io.github.subjekt.compiler.expressions.Expression.Companion","location":"subjekt/io.github.subjekt.compiler.expressions/-expression/-companion/index.html","searchKeys":["Companion","object Companion","io.github.subjekt.compiler.expressions.Expression.Companion"]},{"name":"object Companion","description":"io.github.subjekt.core.Configuration.Companion","location":"subjekt/io.github.subjekt.core/-configuration/-companion/index.html","searchKeys":["Companion","object Companion","io.github.subjekt.core.Configuration.Companion"]},{"name":"object Companion","description":"io.github.subjekt.core.Macro.Companion","location":"subjekt/io.github.subjekt.core/-macro/-companion/index.html","searchKeys":["Companion","object Companion","io.github.subjekt.core.Macro.Companion"]},{"name":"object Companion","description":"io.github.subjekt.core.Parameter.Companion","location":"subjekt/io.github.subjekt.core/-parameter/-companion/index.html","searchKeys":["Companion","object Companion","io.github.subjekt.core.Parameter.Companion"]},{"name":"object Companion","description":"io.github.subjekt.core.Resolvable.Companion","location":"subjekt/io.github.subjekt.core/-resolvable/-companion/index.html","searchKeys":["Companion","object Companion","io.github.subjekt.core.Resolvable.Companion"]},{"name":"object Companion","description":"io.github.subjekt.core.Source.Companion","location":"subjekt/io.github.subjekt.core/-source/-companion/index.html","searchKeys":["Companion","object Companion","io.github.subjekt.core.Source.Companion"]},{"name":"object Companion","description":"io.github.subjekt.core.Subject.Companion","location":"subjekt/io.github.subjekt.core/-subject/-companion/index.html","searchKeys":["Companion","object Companion","io.github.subjekt.core.Subject.Companion"]},{"name":"object Companion","description":"io.github.subjekt.core.SymbolTable.Companion","location":"subjekt/io.github.subjekt.core/-symbol-table/-companion/index.html","searchKeys":["Companion","object Companion","io.github.subjekt.core.SymbolTable.Companion"]},{"name":"object Companion","description":"io.github.subjekt.core.definition.Context.Companion","location":"subjekt/io.github.subjekt.core.definition/-context/-companion/index.html","searchKeys":["Companion","object Companion","io.github.subjekt.core.definition.Context.Companion"]},{"name":"object ExpressionUtils","description":"io.github.subjekt.compiler.expressions.ExpressionUtils","location":"subjekt/io.github.subjekt.compiler.expressions/-expression-utils/index.html","searchKeys":["ExpressionUtils","object ExpressionUtils","io.github.subjekt.compiler.expressions.ExpressionUtils"]},{"name":"object IrUtils","description":"io.github.subjekt.compiler.expressions.ir.utils.IrUtils","location":"subjekt/io.github.subjekt.compiler.expressions.ir.utils/-ir-utils/index.html","searchKeys":["IrUtils","object IrUtils","io.github.subjekt.compiler.expressions.ir.utils.IrUtils"]},{"name":"object Linter","description":"io.github.subjekt.linting.Linter","location":"subjekt/io.github.subjekt.linting/-linter/index.html","searchKeys":["Linter","object Linter","io.github.subjekt.linting.Linter"]},{"name":"object Logger","description":"io.github.subjekt.utils.Logger","location":"subjekt/io.github.subjekt.utils/-logger/index.html","searchKeys":["Logger","object Logger","io.github.subjekt.utils.Logger"]},{"name":"object SliceEngine","description":"io.github.subjekt.compiler.expressions.slices.SliceEngine","location":"subjekt/io.github.subjekt.compiler.expressions.slices/-slice-engine/index.html","searchKeys":["SliceEngine","object SliceEngine","io.github.subjekt.compiler.expressions.slices.SliceEngine"]},{"name":"object SuiteFactory","description":"io.github.subjekt.core.parsing.SuiteFactory","location":"subjekt/io.github.subjekt.core.parsing/-suite-factory/index.html","searchKeys":["SuiteFactory","object SuiteFactory","io.github.subjekt.core.parsing.SuiteFactory"]},{"name":"object Utils","description":"io.github.subjekt.utils.Utils","location":"subjekt/io.github.subjekt.utils/-utils/index.html","searchKeys":["Utils","object Utils","io.github.subjekt.utils.Utils"]},{"name":"open fun report(message: MessageCollector.Message)","description":"io.github.subjekt.utils.MessageCollector.report","location":"subjekt/io.github.subjekt.utils/-message-collector/report.html","searchKeys":["report","open fun report(message: MessageCollector.Message)","io.github.subjekt.utils.MessageCollector.report"]},{"name":"open fun visit(node: IrNode): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visit","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir/-ir-visitor/visit.html","searchKeys":["visit","open fun visit(node: IrNode): T","io.github.subjekt.compiler.expressions.visitors.ir.IrVisitor.visit"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"io.github.subjekt.core.Macro.equals","location":"subjekt/io.github.subjekt.core/-macro/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","io.github.subjekt.core.Macro.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"io.github.subjekt.core.Parameter.equals","location":"subjekt/io.github.subjekt.core/-parameter/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","io.github.subjekt.core.Parameter.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"io.github.subjekt.core.Resolvable.equals","location":"subjekt/io.github.subjekt.core/-resolvable/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","io.github.subjekt.core.Resolvable.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"io.github.subjekt.core.Subject.equals","location":"subjekt/io.github.subjekt.core/-subject/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","io.github.subjekt.core.Subject.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"io.github.subjekt.core.SubjektFunction.equals","location":"subjekt/io.github.subjekt.core/-subjekt-function/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","io.github.subjekt.core.SubjektFunction.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"io.github.subjekt.core.Suite.equals","location":"subjekt/io.github.subjekt.core/-suite/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","io.github.subjekt.core.Suite.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"io.github.subjekt.core.definition.DefinedParameter.equals","location":"subjekt/io.github.subjekt.core.definition/-defined-parameter/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","io.github.subjekt.core.definition.DefinedParameter.equals"]},{"name":"open override fun extract(): Result<Map<String, Any>>","description":"io.github.subjekt.core.JsonSource.extract","location":"subjekt/io.github.subjekt.core/-json-source/extract.html","searchKeys":["extract","open override fun extract(): Result<Map<String, Any>>","io.github.subjekt.core.JsonSource.extract"]},{"name":"open override fun extract(): Result<Map<String, Any>>","description":"io.github.subjekt.core.YamlSource.extract","location":"subjekt/io.github.subjekt.core/-yaml-source/extract.html","searchKeys":["extract","open override fun extract(): Result<Map<String, Any>>","io.github.subjekt.core.YamlSource.extract"]},{"name":"open override fun flushMessages()","description":"io.github.subjekt.utils.MessageCollector.NullCollector.flushMessages","location":"subjekt/io.github.subjekt.utils/-message-collector/-null-collector/flush-messages.html","searchKeys":["flushMessages","open override fun flushMessages()","io.github.subjekt.utils.MessageCollector.NullCollector.flushMessages"]},{"name":"open override fun flushMessages()","description":"io.github.subjekt.utils.MessageCollector.SimpleCollector.flushMessages","location":"subjekt/io.github.subjekt.utils/-message-collector/-simple-collector/flush-messages.html","searchKeys":["flushMessages","open override fun flushMessages()","io.github.subjekt.utils.MessageCollector.SimpleCollector.flushMessages"]},{"name":"open override fun hashCode(): Int","description":"io.github.subjekt.core.Macro.hashCode","location":"subjekt/io.github.subjekt.core/-macro/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","io.github.subjekt.core.Macro.hashCode"]},{"name":"open override fun hashCode(): Int","description":"io.github.subjekt.core.Parameter.hashCode","location":"subjekt/io.github.subjekt.core/-parameter/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","io.github.subjekt.core.Parameter.hashCode"]},{"name":"open override fun hashCode(): Int","description":"io.github.subjekt.core.Resolvable.hashCode","location":"subjekt/io.github.subjekt.core/-resolvable/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","io.github.subjekt.core.Resolvable.hashCode"]},{"name":"open override fun hashCode(): Int","description":"io.github.subjekt.core.Subject.hashCode","location":"subjekt/io.github.subjekt.core/-subject/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","io.github.subjekt.core.Subject.hashCode"]},{"name":"open override fun hashCode(): Int","description":"io.github.subjekt.core.SubjektFunction.hashCode","location":"subjekt/io.github.subjekt.core/-subjekt-function/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","io.github.subjekt.core.SubjektFunction.hashCode"]},{"name":"open override fun hashCode(): Int","description":"io.github.subjekt.core.Suite.hashCode","location":"subjekt/io.github.subjekt.core/-suite/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","io.github.subjekt.core.Suite.hashCode"]},{"name":"open override fun hashCode(): Int","description":"io.github.subjekt.core.definition.DefinedParameter.hashCode","location":"subjekt/io.github.subjekt.core.definition/-defined-parameter/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","io.github.subjekt.core.definition.DefinedParameter.hashCode"]},{"name":"open override fun report(message: MessageCollector.Message)","description":"io.github.subjekt.utils.MessageCollector.NullCollector.report","location":"subjekt/io.github.subjekt.utils/-message-collector/-null-collector/report.html","searchKeys":["report","open override fun report(message: MessageCollector.Message)","io.github.subjekt.utils.MessageCollector.NullCollector.report"]},{"name":"open override fun report(message: MessageCollector.Message)","description":"io.github.subjekt.utils.MessageCollector.SimpleCollector.report","location":"subjekt/io.github.subjekt.utils/-message-collector/-simple-collector/report.html","searchKeys":["report","open override fun report(message: MessageCollector.Message)","io.github.subjekt.utils.MessageCollector.SimpleCollector.report"]},{"name":"open override fun toString(): String","description":"io.github.subjekt.core.Configuration.toString","location":"subjekt/io.github.subjekt.core/-configuration/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.subjekt.core.Configuration.toString"]},{"name":"open override fun toString(): String","description":"io.github.subjekt.core.Resolvable.toString","location":"subjekt/io.github.subjekt.core/-resolvable/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.subjekt.core.Resolvable.toString"]},{"name":"open override fun toString(): String","description":"io.github.subjekt.utils.MessageCollector.Position.toString","location":"subjekt/io.github.subjekt.utils/-message-collector/-position/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.subjekt.utils.MessageCollector.Position.toString"]},{"name":"open override fun visit(node: IrNode)","description":"io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visit","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.debug/-log-visitor/visit.html","searchKeys":["visit","open override fun visit(node: IrNode)","io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visit"]},{"name":"open override fun visit(node: IrNode): Int","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor.visit","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-integer-expression-visitor/visit.html","searchKeys":["visit","open override fun visit(node: IrNode): Int","io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor.visit"]},{"name":"open override fun visitBinaryOperation(node: IrBinaryOperation)","description":"io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitBinaryOperation","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.debug/-log-visitor/visit-binary-operation.html","searchKeys":["visitBinaryOperation","open override fun visitBinaryOperation(node: IrBinaryOperation)","io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitBinaryOperation"]},{"name":"open override fun visitBinaryOperation(node: IrBinaryOperation): Int","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor.visitBinaryOperation","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-integer-expression-visitor/visit-binary-operation.html","searchKeys":["visitBinaryOperation","open override fun visitBinaryOperation(node: IrBinaryOperation): Int","io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor.visitBinaryOperation"]},{"name":"open override fun visitBinaryOperation(node: IrBinaryOperation): String","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitBinaryOperation","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-expression-visitor/visit-binary-operation.html","searchKeys":["visitBinaryOperation","open override fun visitBinaryOperation(node: IrBinaryOperation): String","io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitBinaryOperation"]},{"name":"open override fun visitBinaryOperation(node: IrBinaryOperation): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitBinaryOperation","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-base-expression-visitor/visit-binary-operation.html","searchKeys":["visitBinaryOperation","open override fun visitBinaryOperation(node: IrBinaryOperation): T","io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitBinaryOperation"]},{"name":"open override fun visitBinaryOperation(node: IrBinaryOperation): Type","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitBinaryOperation","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-type-visitor/visit-binary-operation.html","searchKeys":["visitBinaryOperation","open override fun visitBinaryOperation(node: IrBinaryOperation): Type","io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitBinaryOperation"]},{"name":"open override fun visitCall(node: IrCall)","description":"io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitCall","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.debug/-log-visitor/visit-call.html","searchKeys":["visitCall","open override fun visitCall(node: IrCall)","io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitCall"]},{"name":"open override fun visitCall(node: IrCall): String","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitCall","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-expression-visitor/visit-call.html","searchKeys":["visitCall","open override fun visitCall(node: IrCall): String","io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitCall"]},{"name":"open override fun visitCall(node: IrCall): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitCall","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-base-expression-visitor/visit-call.html","searchKeys":["visitCall","open override fun visitCall(node: IrCall): T","io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitCall"]},{"name":"open override fun visitCall(node: IrCall): Type","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitCall","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-type-visitor/visit-call.html","searchKeys":["visitCall","open override fun visitCall(node: IrCall): Type","io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitCall"]},{"name":"open override fun visitCast(node: IrCast)","description":"io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitCast","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.debug/-log-visitor/visit-cast.html","searchKeys":["visitCast","open override fun visitCast(node: IrCast)","io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitCast"]},{"name":"open override fun visitCast(node: IrCast): Int","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor.visitCast","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-integer-expression-visitor/visit-cast.html","searchKeys":["visitCast","open override fun visitCast(node: IrCast): Int","io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor.visitCast"]},{"name":"open override fun visitCast(node: IrCast): String","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitCast","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-expression-visitor/visit-cast.html","searchKeys":["visitCast","open override fun visitCast(node: IrCast): String","io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitCast"]},{"name":"open override fun visitCast(node: IrCast): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitCast","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-base-expression-visitor/visit-cast.html","searchKeys":["visitCast","open override fun visitCast(node: IrCast): T","io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitCast"]},{"name":"open override fun visitCast(node: IrCast): Type","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitCast","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-type-visitor/visit-cast.html","searchKeys":["visitCast","open override fun visitCast(node: IrCast): Type","io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitCast"]},{"name":"open override fun visitDotCall(node: IrDotCall)","description":"io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitDotCall","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.debug/-log-visitor/visit-dot-call.html","searchKeys":["visitDotCall","open override fun visitDotCall(node: IrDotCall)","io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitDotCall"]},{"name":"open override fun visitDotCall(node: IrDotCall): String","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitDotCall","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-expression-visitor/visit-dot-call.html","searchKeys":["visitDotCall","open override fun visitDotCall(node: IrDotCall): String","io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitDotCall"]},{"name":"open override fun visitDotCall(node: IrDotCall): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitDotCall","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-base-expression-visitor/visit-dot-call.html","searchKeys":["visitDotCall","open override fun visitDotCall(node: IrDotCall): T","io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitDotCall"]},{"name":"open override fun visitDotCall(node: IrDotCall): Type","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitDotCall","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-type-visitor/visit-dot-call.html","searchKeys":["visitDotCall","open override fun visitDotCall(node: IrDotCall): Type","io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitDotCall"]},{"name":"open override fun visitEndOfSlice(node: IrEndOfSlice)","description":"io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitEndOfSlice","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.debug/-log-visitor/visit-end-of-slice.html","searchKeys":["visitEndOfSlice","open override fun visitEndOfSlice(node: IrEndOfSlice)","io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitEndOfSlice"]},{"name":"open override fun visitEndOfSlice(node: IrEndOfSlice): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitEndOfSlice","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-base-expression-visitor/visit-end-of-slice.html","searchKeys":["visitEndOfSlice","open override fun visitEndOfSlice(node: IrEndOfSlice): T","io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitEndOfSlice"]},{"name":"open override fun visitEndOfSlice(node: IrEndOfSlice): Type","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitEndOfSlice","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-type-visitor/visit-end-of-slice.html","searchKeys":["visitEndOfSlice","open override fun visitEndOfSlice(node: IrEndOfSlice): Type","io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitEndOfSlice"]},{"name":"open override fun visitFloatLiteral(node: IrFloatLiteral)","description":"io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitFloatLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.debug/-log-visitor/visit-float-literal.html","searchKeys":["visitFloatLiteral","open override fun visitFloatLiteral(node: IrFloatLiteral)","io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitFloatLiteral"]},{"name":"open override fun visitFloatLiteral(node: IrFloatLiteral): Int","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor.visitFloatLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-integer-expression-visitor/visit-float-literal.html","searchKeys":["visitFloatLiteral","open override fun visitFloatLiteral(node: IrFloatLiteral): Int","io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor.visitFloatLiteral"]},{"name":"open override fun visitFloatLiteral(node: IrFloatLiteral): String","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitFloatLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-expression-visitor/visit-float-literal.html","searchKeys":["visitFloatLiteral","open override fun visitFloatLiteral(node: IrFloatLiteral): String","io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitFloatLiteral"]},{"name":"open override fun visitFloatLiteral(node: IrFloatLiteral): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitFloatLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-base-expression-visitor/visit-float-literal.html","searchKeys":["visitFloatLiteral","open override fun visitFloatLiteral(node: IrFloatLiteral): T","io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitFloatLiteral"]},{"name":"open override fun visitFloatLiteral(node: IrFloatLiteral): Type","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitFloatLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-type-visitor/visit-float-literal.html","searchKeys":["visitFloatLiteral","open override fun visitFloatLiteral(node: IrFloatLiteral): Type","io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitFloatLiteral"]},{"name":"open override fun visitIntegerLiteral(node: IrIntegerLiteral)","description":"io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitIntegerLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.debug/-log-visitor/visit-integer-literal.html","searchKeys":["visitIntegerLiteral","open override fun visitIntegerLiteral(node: IrIntegerLiteral)","io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitIntegerLiteral"]},{"name":"open override fun visitIntegerLiteral(node: IrIntegerLiteral): Int","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor.visitIntegerLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-integer-expression-visitor/visit-integer-literal.html","searchKeys":["visitIntegerLiteral","open override fun visitIntegerLiteral(node: IrIntegerLiteral): Int","io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor.visitIntegerLiteral"]},{"name":"open override fun visitIntegerLiteral(node: IrIntegerLiteral): String","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitIntegerLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-expression-visitor/visit-integer-literal.html","searchKeys":["visitIntegerLiteral","open override fun visitIntegerLiteral(node: IrIntegerLiteral): String","io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitIntegerLiteral"]},{"name":"open override fun visitIntegerLiteral(node: IrIntegerLiteral): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitIntegerLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-base-expression-visitor/visit-integer-literal.html","searchKeys":["visitIntegerLiteral","open override fun visitIntegerLiteral(node: IrIntegerLiteral): T","io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitIntegerLiteral"]},{"name":"open override fun visitIntegerLiteral(node: IrIntegerLiteral): Type","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitIntegerLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-type-visitor/visit-integer-literal.html","searchKeys":["visitIntegerLiteral","open override fun visitIntegerLiteral(node: IrIntegerLiteral): Type","io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitIntegerLiteral"]},{"name":"open override fun visitParameter(node: IrParameter)","description":"io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitParameter","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.debug/-log-visitor/visit-parameter.html","searchKeys":["visitParameter","open override fun visitParameter(node: IrParameter)","io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitParameter"]},{"name":"open override fun visitParameter(node: IrParameter): String","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitParameter","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-expression-visitor/visit-parameter.html","searchKeys":["visitParameter","open override fun visitParameter(node: IrParameter): String","io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitParameter"]},{"name":"open override fun visitParameter(node: IrParameter): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitParameter","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-base-expression-visitor/visit-parameter.html","searchKeys":["visitParameter","open override fun visitParameter(node: IrParameter): T","io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitParameter"]},{"name":"open override fun visitParameter(node: IrParameter): Type","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitParameter","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-type-visitor/visit-parameter.html","searchKeys":["visitParameter","open override fun visitParameter(node: IrParameter): Type","io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitParameter"]},{"name":"open override fun visitRangeSlice(node: IrRangeSlice)","description":"io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitRangeSlice","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.debug/-log-visitor/visit-range-slice.html","searchKeys":["visitRangeSlice","open override fun visitRangeSlice(node: IrRangeSlice)","io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitRangeSlice"]},{"name":"open override fun visitRangeSlice(node: IrRangeSlice): String","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitRangeSlice","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-expression-visitor/visit-range-slice.html","searchKeys":["visitRangeSlice","open override fun visitRangeSlice(node: IrRangeSlice): String","io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitRangeSlice"]},{"name":"open override fun visitRangeSlice(node: IrRangeSlice): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitRangeSlice","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-base-expression-visitor/visit-range-slice.html","searchKeys":["visitRangeSlice","open override fun visitRangeSlice(node: IrRangeSlice): T","io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitRangeSlice"]},{"name":"open override fun visitRangeSlice(node: IrRangeSlice): Type","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitRangeSlice","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-type-visitor/visit-range-slice.html","searchKeys":["visitRangeSlice","open override fun visitRangeSlice(node: IrRangeSlice): Type","io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitRangeSlice"]},{"name":"open override fun visitSingleSlice(node: IrSingleSlice)","description":"io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitSingleSlice","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.debug/-log-visitor/visit-single-slice.html","searchKeys":["visitSingleSlice","open override fun visitSingleSlice(node: IrSingleSlice)","io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitSingleSlice"]},{"name":"open override fun visitSingleSlice(node: IrSingleSlice): String","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitSingleSlice","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-expression-visitor/visit-single-slice.html","searchKeys":["visitSingleSlice","open override fun visitSingleSlice(node: IrSingleSlice): String","io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitSingleSlice"]},{"name":"open override fun visitSingleSlice(node: IrSingleSlice): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitSingleSlice","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-base-expression-visitor/visit-single-slice.html","searchKeys":["visitSingleSlice","open override fun visitSingleSlice(node: IrSingleSlice): T","io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitSingleSlice"]},{"name":"open override fun visitSingleSlice(node: IrSingleSlice): Type","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitSingleSlice","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-type-visitor/visit-single-slice.html","searchKeys":["visitSingleSlice","open override fun visitSingleSlice(node: IrSingleSlice): Type","io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitSingleSlice"]},{"name":"open override fun visitStringLiteral(node: IrStringLiteral)","description":"io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitStringLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.debug/-log-visitor/visit-string-literal.html","searchKeys":["visitStringLiteral","open override fun visitStringLiteral(node: IrStringLiteral)","io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitStringLiteral"]},{"name":"open override fun visitStringLiteral(node: IrStringLiteral): Int","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor.visitStringLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-integer-expression-visitor/visit-string-literal.html","searchKeys":["visitStringLiteral","open override fun visitStringLiteral(node: IrStringLiteral): Int","io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor.visitStringLiteral"]},{"name":"open override fun visitStringLiteral(node: IrStringLiteral): String","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitStringLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-expression-visitor/visit-string-literal.html","searchKeys":["visitStringLiteral","open override fun visitStringLiteral(node: IrStringLiteral): String","io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitStringLiteral"]},{"name":"open override fun visitStringLiteral(node: IrStringLiteral): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitStringLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-base-expression-visitor/visit-string-literal.html","searchKeys":["visitStringLiteral","open override fun visitStringLiteral(node: IrStringLiteral): T","io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitStringLiteral"]},{"name":"open override fun visitStringLiteral(node: IrStringLiteral): Type","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitStringLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-type-visitor/visit-string-literal.html","searchKeys":["visitStringLiteral","open override fun visitStringLiteral(node: IrStringLiteral): Type","io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitStringLiteral"]},{"name":"open override fun visitUnaryOperation(node: IrUnaryOperation)","description":"io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitUnaryOperation","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.debug/-log-visitor/visit-unary-operation.html","searchKeys":["visitUnaryOperation","open override fun visitUnaryOperation(node: IrUnaryOperation)","io.github.subjekt.compiler.expressions.visitors.debug.LogVisitor.visitUnaryOperation"]},{"name":"open override fun visitUnaryOperation(node: IrUnaryOperation): Int","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor.visitUnaryOperation","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-integer-expression-visitor/visit-unary-operation.html","searchKeys":["visitUnaryOperation","open override fun visitUnaryOperation(node: IrUnaryOperation): Int","io.github.subjekt.compiler.expressions.visitors.ir.impl.IntegerExpressionVisitor.visitUnaryOperation"]},{"name":"open override fun visitUnaryOperation(node: IrUnaryOperation): String","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitUnaryOperation","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-expression-visitor/visit-unary-operation.html","searchKeys":["visitUnaryOperation","open override fun visitUnaryOperation(node: IrUnaryOperation): String","io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.visitUnaryOperation"]},{"name":"open override fun visitUnaryOperation(node: IrUnaryOperation): T","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitUnaryOperation","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-base-expression-visitor/visit-unary-operation.html","searchKeys":["visitUnaryOperation","open override fun visitUnaryOperation(node: IrUnaryOperation): T","io.github.subjekt.compiler.expressions.visitors.ir.impl.BaseExpressionVisitor.visitUnaryOperation"]},{"name":"open override fun visitUnaryOperation(node: IrUnaryOperation): Type","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitUnaryOperation","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-type-visitor/visit-unary-operation.html","searchKeys":["visitUnaryOperation","open override fun visitUnaryOperation(node: IrUnaryOperation): Type","io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.visitUnaryOperation"]},{"name":"open override val callableId: String","description":"io.github.subjekt.compiler.expressions.CallSymbol.callableId","location":"subjekt/io.github.subjekt.compiler.expressions/-call-symbol/callable-id.html","searchKeys":["callableId","open override val callableId: String","io.github.subjekt.compiler.expressions.CallSymbol.callableId"]},{"name":"open override val callableId: String","description":"io.github.subjekt.compiler.expressions.QualifiedCallSymbol.callableId","location":"subjekt/io.github.subjekt.compiler.expressions/-qualified-call-symbol/callable-id.html","searchKeys":["callableId","open override val callableId: String","io.github.subjekt.compiler.expressions.QualifiedCallSymbol.callableId"]},{"name":"open override val identifier: String","description":"io.github.subjekt.compiler.expressions.ir.IrCall.identifier","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-call/identifier.html","searchKeys":["identifier","open override val identifier: String","io.github.subjekt.compiler.expressions.ir.IrCall.identifier"]},{"name":"open override val identifier: String","description":"io.github.subjekt.compiler.expressions.ir.IrParameter.identifier","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-parameter/identifier.html","searchKeys":["identifier","open override val identifier: String","io.github.subjekt.compiler.expressions.ir.IrParameter.identifier"]},{"name":"open override val identifier: String","description":"io.github.subjekt.compiler.expressions.ir.IrSingleSlice.identifier","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-single-slice/identifier.html","searchKeys":["identifier","open override val identifier: String","io.github.subjekt.compiler.expressions.ir.IrSingleSlice.identifier"]},{"name":"open override val line: Int","description":"io.github.subjekt.compiler.expressions.ir.Error.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-error/line.html","searchKeys":["line","open override val line: Int","io.github.subjekt.compiler.expressions.ir.Error.line"]},{"name":"open override val line: Int","description":"io.github.subjekt.compiler.expressions.ir.IrAtomicNode.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-atomic-node/line.html","searchKeys":["line","open override val line: Int","io.github.subjekt.compiler.expressions.ir.IrAtomicNode.line"]},{"name":"open override val line: Int","description":"io.github.subjekt.compiler.expressions.ir.IrBinaryOperation.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-binary-operation/line.html","searchKeys":["line","open override val line: Int","io.github.subjekt.compiler.expressions.ir.IrBinaryOperation.line"]},{"name":"open override val line: Int","description":"io.github.subjekt.compiler.expressions.ir.IrCall.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-call/line.html","searchKeys":["line","open override val line: Int","io.github.subjekt.compiler.expressions.ir.IrCall.line"]},{"name":"open override val line: Int","description":"io.github.subjekt.compiler.expressions.ir.IrCast.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-cast/line.html","searchKeys":["line","open override val line: Int","io.github.subjekt.compiler.expressions.ir.IrCast.line"]},{"name":"open override val line: Int","description":"io.github.subjekt.compiler.expressions.ir.IrDotCall.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-dot-call/line.html","searchKeys":["line","open override val line: Int","io.github.subjekt.compiler.expressions.ir.IrDotCall.line"]},{"name":"open override val line: Int","description":"io.github.subjekt.compiler.expressions.ir.IrEndOfSlice.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-end-of-slice/line.html","searchKeys":["line","open override val line: Int","io.github.subjekt.compiler.expressions.ir.IrEndOfSlice.line"]},{"name":"open override val line: Int","description":"io.github.subjekt.compiler.expressions.ir.IrFloatLiteral.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-float-literal/line.html","searchKeys":["line","open override val line: Int","io.github.subjekt.compiler.expressions.ir.IrFloatLiteral.line"]},{"name":"open override val line: Int","description":"io.github.subjekt.compiler.expressions.ir.IrIdentified.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-identified/line.html","searchKeys":["line","open override val line: Int","io.github.subjekt.compiler.expressions.ir.IrIdentified.line"]},{"name":"open override val line: Int","description":"io.github.subjekt.compiler.expressions.ir.IrIntegerLiteral.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-integer-literal/line.html","searchKeys":["line","open override val line: Int","io.github.subjekt.compiler.expressions.ir.IrIntegerLiteral.line"]},{"name":"open override val line: Int","description":"io.github.subjekt.compiler.expressions.ir.IrLiteral.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-literal/line.html","searchKeys":["line","open override val line: Int","io.github.subjekt.compiler.expressions.ir.IrLiteral.line"]},{"name":"open override val line: Int","description":"io.github.subjekt.compiler.expressions.ir.IrParameter.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-parameter/line.html","searchKeys":["line","open override val line: Int","io.github.subjekt.compiler.expressions.ir.IrParameter.line"]},{"name":"open override val line: Int","description":"io.github.subjekt.compiler.expressions.ir.IrRangeSlice.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-range-slice/line.html","searchKeys":["line","open override val line: Int","io.github.subjekt.compiler.expressions.ir.IrRangeSlice.line"]},{"name":"open override val line: Int","description":"io.github.subjekt.compiler.expressions.ir.IrResolvableNode.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-resolvable-node/line.html","searchKeys":["line","open override val line: Int","io.github.subjekt.compiler.expressions.ir.IrResolvableNode.line"]},{"name":"open override val line: Int","description":"io.github.subjekt.compiler.expressions.ir.IrSingleSlice.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-single-slice/line.html","searchKeys":["line","open override val line: Int","io.github.subjekt.compiler.expressions.ir.IrSingleSlice.line"]},{"name":"open override val line: Int","description":"io.github.subjekt.compiler.expressions.ir.IrStringLiteral.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-string-literal/line.html","searchKeys":["line","open override val line: Int","io.github.subjekt.compiler.expressions.ir.IrStringLiteral.line"]},{"name":"open override val line: Int","description":"io.github.subjekt.compiler.expressions.ir.IrUnaryOperation.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-unary-operation/line.html","searchKeys":["line","open override val line: Int","io.github.subjekt.compiler.expressions.ir.IrUnaryOperation.line"]},{"name":"open override val message: String?","description":"io.github.subjekt.compiler.expressions.InternalCompilerException.message","location":"subjekt/io.github.subjekt.compiler.expressions/-internal-compiler-exception/message.html","searchKeys":["message","open override val message: String?","io.github.subjekt.compiler.expressions.InternalCompilerException.message"]},{"name":"open override val message: String?","description":"io.github.subjekt.compiler.expressions.SymbolNotFoundException.message","location":"subjekt/io.github.subjekt.compiler.expressions/-symbol-not-found-exception/message.html","searchKeys":["message","open override val message: String?","io.github.subjekt.compiler.expressions.SymbolNotFoundException.message"]},{"name":"open override val messages: List<MessageCollector.Message>","description":"io.github.subjekt.utils.MessageCollector.NullCollector.messages","location":"subjekt/io.github.subjekt.utils/-message-collector/-null-collector/messages.html","searchKeys":["messages","open override val messages: List<MessageCollector.Message>","io.github.subjekt.utils.MessageCollector.NullCollector.messages"]},{"name":"open override val nArgs: Int","description":"io.github.subjekt.compiler.expressions.CallSymbol.nArgs","location":"subjekt/io.github.subjekt.compiler.expressions/-call-symbol/n-args.html","searchKeys":["nArgs","open override val nArgs: Int","io.github.subjekt.compiler.expressions.CallSymbol.nArgs"]},{"name":"open override val nArgs: Int","description":"io.github.subjekt.compiler.expressions.QualifiedCallSymbol.nArgs","location":"subjekt/io.github.subjekt.compiler.expressions/-qualified-call-symbol/n-args.html","searchKeys":["nArgs","open override val nArgs: Int","io.github.subjekt.compiler.expressions.QualifiedCallSymbol.nArgs"]},{"name":"open override val text: String","description":"io.github.subjekt.core.JsonSource.text","location":"subjekt/io.github.subjekt.core/-json-source/text.html","searchKeys":["text","open override val text: String","io.github.subjekt.core.JsonSource.text"]},{"name":"open override val text: String","description":"io.github.subjekt.core.YamlSource.text","location":"subjekt/io.github.subjekt.core/-yaml-source/text.html","searchKeys":["text","open override val text: String","io.github.subjekt.core.YamlSource.text"]},{"name":"open override var messages: List<MessageCollector.Message>","description":"io.github.subjekt.utils.MessageCollector.SimpleCollector.messages","location":"subjekt/io.github.subjekt.utils/-message-collector/-simple-collector/messages.html","searchKeys":["messages","open override var messages: List<MessageCollector.Message>","io.github.subjekt.utils.MessageCollector.SimpleCollector.messages"]},{"name":"open val identifier: String","description":"io.github.subjekt.compiler.expressions.ir.IrIdentified.identifier","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-identified/identifier.html","searchKeys":["identifier","open val identifier: String","io.github.subjekt.compiler.expressions.ir.IrIdentified.identifier"]},{"name":"open val line: Int","description":"io.github.subjekt.compiler.expressions.ir.IrNode.line","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-node/line.html","searchKeys":["line","open val line: Int","io.github.subjekt.compiler.expressions.ir.IrNode.line"]},{"name":"operator fun invoke(arguments: List<String>): String","description":"io.github.subjekt.core.SubjektFunction.invoke","location":"subjekt/io.github.subjekt.core/-subjekt-function/invoke.html","searchKeys":["invoke","operator fun invoke(arguments: List<String>): String","io.github.subjekt.core.SubjektFunction.invoke"]},{"name":"operator fun plus(symbolTable: SymbolTable): SymbolTable","description":"io.github.subjekt.core.SymbolTable.plus","location":"subjekt/io.github.subjekt.core/-symbol-table/plus.html","searchKeys":["plus","operator fun plus(symbolTable: SymbolTable): SymbolTable","io.github.subjekt.core.SymbolTable.plus"]},{"name":"sealed class CallableSymbol : ResolvableSymbol","description":"io.github.subjekt.compiler.expressions.CallableSymbol","location":"subjekt/io.github.subjekt.compiler.expressions/-callable-symbol/index.html","searchKeys":["CallableSymbol","sealed class CallableSymbol : ResolvableSymbol","io.github.subjekt.compiler.expressions.CallableSymbol"]},{"name":"sealed class IrAtomicNode : IrNode","description":"io.github.subjekt.compiler.expressions.ir.IrAtomicNode","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-atomic-node/index.html","searchKeys":["IrAtomicNode","sealed class IrAtomicNode : IrNode","io.github.subjekt.compiler.expressions.ir.IrAtomicNode"]},{"name":"sealed class IrIdentified : IrAtomicNode","description":"io.github.subjekt.compiler.expressions.ir.IrIdentified","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-identified/index.html","searchKeys":["IrIdentified","sealed class IrIdentified : IrAtomicNode","io.github.subjekt.compiler.expressions.ir.IrIdentified"]},{"name":"sealed class IrLiteral : IrAtomicNode","description":"io.github.subjekt.compiler.expressions.ir.IrLiteral","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-literal/index.html","searchKeys":["IrLiteral","sealed class IrLiteral : IrAtomicNode","io.github.subjekt.compiler.expressions.ir.IrLiteral"]},{"name":"sealed class IrNode","description":"io.github.subjekt.compiler.expressions.ir.IrNode","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-node/index.html","searchKeys":["IrNode","sealed class IrNode","io.github.subjekt.compiler.expressions.ir.IrNode"]},{"name":"sealed class IrResolvableNode : IrNode","description":"io.github.subjekt.compiler.expressions.ir.IrResolvableNode","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-resolvable-node/index.html","searchKeys":["IrResolvableNode","sealed class IrResolvableNode : IrNode","io.github.subjekt.compiler.expressions.ir.IrResolvableNode"]},{"name":"sealed class MessageCollector","description":"io.github.subjekt.utils.MessageCollector","location":"subjekt/io.github.subjekt.utils/-message-collector/index.html","searchKeys":["MessageCollector","sealed class MessageCollector","io.github.subjekt.utils.MessageCollector"]},{"name":"sealed class ResolvableSymbol","description":"io.github.subjekt.compiler.expressions.ResolvableSymbol","location":"subjekt/io.github.subjekt.compiler.expressions/-resolvable-symbol/index.html","searchKeys":["ResolvableSymbol","sealed class ResolvableSymbol","io.github.subjekt.compiler.expressions.ResolvableSymbol"]},{"name":"sealed class Source","description":"io.github.subjekt.core.Source","location":"subjekt/io.github.subjekt.core/-source/index.html","searchKeys":["Source","sealed class Source","io.github.subjekt.core.Source"]},{"name":"sealed class SubjektResult<I, R>","description":"io.github.subjekt.core.resolution.SubjektResult","location":"subjekt/io.github.subjekt.core.resolution/-subjekt-result/index.html","searchKeys":["SubjektResult","sealed class SubjektResult<I, R>","io.github.subjekt.core.resolution.SubjektResult"]},{"name":"sealed class Symbol","description":"io.github.subjekt.core.Symbol","location":"subjekt/io.github.subjekt.core/-symbol/index.html","searchKeys":["Symbol","sealed class Symbol","io.github.subjekt.core.Symbol"]},{"name":"val MACRO_NAME_KEYS: Set<String>","description":"io.github.subjekt.core.Macro.Companion.MACRO_NAME_KEYS","location":"subjekt/io.github.subjekt.core/-macro/-companion/-m-a-c-r-o_-n-a-m-e_-k-e-y-s.html","searchKeys":["MACRO_NAME_KEYS","val MACRO_NAME_KEYS: Set<String>","io.github.subjekt.core.Macro.Companion.MACRO_NAME_KEYS"]},{"name":"val MACRO_RESOLVABLES_KEYS: Set<String>","description":"io.github.subjekt.core.Macro.Companion.MACRO_RESOLVABLES_KEYS","location":"subjekt/io.github.subjekt.core/-macro/-companion/-m-a-c-r-o_-r-e-s-o-l-v-a-b-l-e-s_-k-e-y-s.html","searchKeys":["MACRO_RESOLVABLES_KEYS","val MACRO_RESOLVABLES_KEYS: Set<String>","io.github.subjekt.core.Macro.Companion.MACRO_RESOLVABLES_KEYS"]},{"name":"val PARAMETER_NAME_KEYS: Set<String>","description":"io.github.subjekt.core.Parameter.Companion.PARAMETER_NAME_KEYS","location":"subjekt/io.github.subjekt.core/-parameter/-companion/-p-a-r-a-m-e-t-e-r_-n-a-m-e_-k-e-y-s.html","searchKeys":["PARAMETER_NAME_KEYS","val PARAMETER_NAME_KEYS: Set<String>","io.github.subjekt.core.Parameter.Companion.PARAMETER_NAME_KEYS"]},{"name":"val PARAMETER_VALUES_KEYS: Set<String>","description":"io.github.subjekt.core.Parameter.Companion.PARAMETER_VALUES_KEYS","location":"subjekt/io.github.subjekt.core/-parameter/-companion/-p-a-r-a-m-e-t-e-r_-v-a-l-u-e-s_-k-e-y-s.html","searchKeys":["PARAMETER_VALUES_KEYS","val PARAMETER_VALUES_KEYS: Set<String>","io.github.subjekt.core.Parameter.Companion.PARAMETER_VALUES_KEYS"]},{"name":"val SUBJECT_NAME_KEYS: Set<String>","description":"io.github.subjekt.core.Subject.Companion.SUBJECT_NAME_KEYS","location":"subjekt/io.github.subjekt.core/-subject/-companion/-s-u-b-j-e-c-t_-n-a-m-e_-k-e-y-s.html","searchKeys":["SUBJECT_NAME_KEYS","val SUBJECT_NAME_KEYS: Set<String>","io.github.subjekt.core.Subject.Companion.SUBJECT_NAME_KEYS"]},{"name":"val arguments: List<IrNode>","description":"io.github.subjekt.compiler.expressions.ir.IrCall.arguments","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-call/arguments.html","searchKeys":["arguments","val arguments: List<IrNode>","io.github.subjekt.compiler.expressions.ir.IrCall.arguments"]},{"name":"val arguments: List<IrNode>","description":"io.github.subjekt.compiler.expressions.ir.IrDotCall.arguments","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-dot-call/arguments.html","searchKeys":["arguments","val arguments: List<IrNode>","io.github.subjekt.compiler.expressions.ir.IrDotCall.arguments"]},{"name":"val argumentsIdentifiers: List<String>","description":"io.github.subjekt.core.Macro.argumentsIdentifiers","location":"subjekt/io.github.subjekt.core/-macro/arguments-identifiers.html","searchKeys":["argumentsIdentifiers","val argumentsIdentifiers: List<String>","io.github.subjekt.core.Macro.argumentsIdentifiers"]},{"name":"val argumentsIdentifiers: List<String>","description":"io.github.subjekt.core.definition.DefinedMacro.argumentsIdentifiers","location":"subjekt/io.github.subjekt.core.definition/-defined-macro/arguments-identifiers.html","searchKeys":["argumentsIdentifiers","val argumentsIdentifiers: List<String>","io.github.subjekt.core.definition.DefinedMacro.argumentsIdentifiers"]},{"name":"val callId: String","description":"io.github.subjekt.compiler.expressions.ir.IrDotCall.callId","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-dot-call/call-id.html","searchKeys":["callId","val callId: String","io.github.subjekt.compiler.expressions.ir.IrDotCall.callId"]},{"name":"val charPositionInLine: Int","description":"io.github.subjekt.utils.MessageCollector.Position.charPositionInLine","location":"subjekt/io.github.subjekt.utils/-message-collector/-position/char-position-in-line.html","searchKeys":["charPositionInLine","val charPositionInLine: Int","io.github.subjekt.utils.MessageCollector.Position.charPositionInLine"]},{"name":"val codePreamble: String","description":"io.github.subjekt.core.Configuration.codePreamble","location":"subjekt/io.github.subjekt.core/-configuration/code-preamble.html","searchKeys":["codePreamble","val codePreamble: String","io.github.subjekt.core.Configuration.codePreamble"]},{"name":"val configuration: Configuration","description":"io.github.subjekt.core.Suite.configuration","location":"subjekt/io.github.subjekt.core/-suite/configuration.html","searchKeys":["configuration","val configuration: Configuration","io.github.subjekt.core.Suite.configuration"]},{"name":"val context: Context","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.context","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-expression-visitor/context.html","searchKeys":["context","val context: Context","io.github.subjekt.compiler.expressions.visitors.ir.impl.ExpressionVisitor.context"]},{"name":"val context: Context","description":"io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.context","location":"subjekt/io.github.subjekt.compiler.expressions.visitors.ir.impl/-type-visitor/context.html","searchKeys":["context","val context: Context","io.github.subjekt.compiler.expressions.visitors.ir.impl.TypeVisitor.context"]},{"name":"val definedMacros: Map<String, DefinedMacro>","description":"io.github.subjekt.core.definition.Context.definedMacros","location":"subjekt/io.github.subjekt.core.definition/-context/defined-macros.html","searchKeys":["definedMacros","val definedMacros: Map<String, DefinedMacro>","io.github.subjekt.core.definition.Context.definedMacros"]},{"name":"val definedParameters: Map<String, DefinedParameter>","description":"io.github.subjekt.core.definition.Context.definedParameters","location":"subjekt/io.github.subjekt.core.definition/-context/defined-parameters.html","searchKeys":["definedParameters","val definedParameters: Map<String, DefinedParameter>","io.github.subjekt.core.definition.Context.definedParameters"]},{"name":"val empty: Context","description":"io.github.subjekt.core.definition.Context.Companion.empty","location":"subjekt/io.github.subjekt.core.definition/-context/-companion/empty.html","searchKeys":["empty","val empty: Context","io.github.subjekt.core.definition.Context.Companion.empty"]},{"name":"val end: IrAtomicNode","description":"io.github.subjekt.compiler.expressions.ir.IrRangeSlice.end","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-range-slice/end.html","searchKeys":["end","val end: IrAtomicNode","io.github.subjekt.compiler.expressions.ir.IrRangeSlice.end"]},{"name":"val endIndex: Int? = null","description":"io.github.subjekt.compiler.expressions.SliceSymbol.endIndex","location":"subjekt/io.github.subjekt.compiler.expressions/-slice-symbol/end-index.html","searchKeys":["endIndex","val endIndex: Int? = null","io.github.subjekt.compiler.expressions.SliceSymbol.endIndex"]},{"name":"val entries: EnumEntries<BinaryOperator>","description":"io.github.subjekt.compiler.expressions.ir.BinaryOperator.entries","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-binary-operator/entries.html","searchKeys":["entries","val entries: EnumEntries<BinaryOperator>","io.github.subjekt.compiler.expressions.ir.BinaryOperator.entries"]},{"name":"val entries: EnumEntries<IrNativeType>","description":"io.github.subjekt.compiler.expressions.ir.IrNativeType.entries","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-native-type/entries.html","searchKeys":["entries","val entries: EnumEntries<IrNativeType>","io.github.subjekt.compiler.expressions.ir.IrNativeType.entries"]},{"name":"val entries: EnumEntries<MessageCollector.MessageType>","description":"io.github.subjekt.utils.MessageCollector.MessageType.entries","location":"subjekt/io.github.subjekt.utils/-message-collector/-message-type/entries.html","searchKeys":["entries","val entries: EnumEntries<MessageCollector.MessageType>","io.github.subjekt.utils.MessageCollector.MessageType.entries"]},{"name":"val entries: EnumEntries<Type>","description":"io.github.subjekt.compiler.expressions.ir.Type.entries","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-type/entries.html","searchKeys":["entries","val entries: EnumEntries<Type>","io.github.subjekt.compiler.expressions.ir.Type.entries"]},{"name":"val entries: EnumEntries<UnaryOperator>","description":"io.github.subjekt.compiler.expressions.ir.UnaryOperator.entries","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-unary-operator/entries.html","searchKeys":["entries","val entries: EnumEntries<UnaryOperator>","io.github.subjekt.compiler.expressions.ir.UnaryOperator.entries"]},{"name":"val expressionPrefix: String","description":"io.github.subjekt.core.Configuration.expressionPrefix","location":"subjekt/io.github.subjekt.core/-configuration/expression-prefix.html","searchKeys":["expressionPrefix","val expressionPrefix: String","io.github.subjekt.core.Configuration.expressionPrefix"]},{"name":"val expressionSuffix: String","description":"io.github.subjekt.core.Configuration.expressionSuffix","location":"subjekt/io.github.subjekt.core/-configuration/expression-suffix.html","searchKeys":["expressionSuffix","val expressionSuffix: String","io.github.subjekt.core.Configuration.expressionSuffix"]},{"name":"val functions: Map<String, SubjektFunction>","description":"io.github.subjekt.core.SymbolTable.functions","location":"subjekt/io.github.subjekt.core/-symbol-table/functions.html","searchKeys":["functions","val functions: Map<String, SubjektFunction>","io.github.subjekt.core.SymbolTable.functions"]},{"name":"val functions: Map<String, SubjektFunction>","description":"io.github.subjekt.core.definition.Context.functions","location":"subjekt/io.github.subjekt.core.definition/-context/functions.html","searchKeys":["functions","val functions: Map<String, SubjektFunction>","io.github.subjekt.core.definition.Context.functions"]},{"name":"val generationGraphJsonExporter: Exporter<Pair<Int, String>, Map<Int, List<String>>>","description":"io.github.subjekt.generationGraphJsonExporter","location":"subjekt/io.github.subjekt/generation-graph-json-exporter.html","searchKeys":["generationGraphJsonExporter","val generationGraphJsonExporter: Exporter<Pair<Int, String>, Map<Int, List<String>>>","io.github.subjekt.generationGraphJsonExporter"]},{"name":"val id: Int","description":"io.github.subjekt.core.Subject.id","location":"subjekt/io.github.subjekt.core/-subject/id.html","searchKeys":["id","val id: Int","io.github.subjekt.core.Subject.id"]},{"name":"val id: String","description":"io.github.subjekt.compiler.expressions.ParameterSymbol.id","location":"subjekt/io.github.subjekt.compiler.expressions/-parameter-symbol/id.html","searchKeys":["id","val id: String","io.github.subjekt.compiler.expressions.ParameterSymbol.id"]},{"name":"val id: String","description":"io.github.subjekt.compiler.expressions.QualifiedCallSymbol.id","location":"subjekt/io.github.subjekt.compiler.expressions/-qualified-call-symbol/id.html","searchKeys":["id","val id: String","io.github.subjekt.compiler.expressions.QualifiedCallSymbol.id"]},{"name":"val id: String","description":"io.github.subjekt.core.Macro.id","location":"subjekt/io.github.subjekt.core/-macro/id.html","searchKeys":["id","val id: String","io.github.subjekt.core.Macro.id"]},{"name":"val id: String","description":"io.github.subjekt.core.Module.id","location":"subjekt/io.github.subjekt.core/-module/id.html","searchKeys":["id","val id: String","io.github.subjekt.core.Module.id"]},{"name":"val id: String","description":"io.github.subjekt.core.Parameter.id","location":"subjekt/io.github.subjekt.core/-parameter/id.html","searchKeys":["id","val id: String","io.github.subjekt.core.Parameter.id"]},{"name":"val id: String","description":"io.github.subjekt.core.SubjektFunction.id","location":"subjekt/io.github.subjekt.core/-subjekt-function/id.html","searchKeys":["id","val id: String","io.github.subjekt.core.SubjektFunction.id"]},{"name":"val id: String","description":"io.github.subjekt.core.Suite.id","location":"subjekt/io.github.subjekt.core/-suite/id.html","searchKeys":["id","val id: String","io.github.subjekt.core.Suite.id"]},{"name":"val identifier: String","description":"io.github.subjekt.compiler.expressions.SliceSymbol.identifier","location":"subjekt/io.github.subjekt.compiler.expressions/-slice-symbol/identifier.html","searchKeys":["identifier","val identifier: String","io.github.subjekt.compiler.expressions.SliceSymbol.identifier"]},{"name":"val identifier: String","description":"io.github.subjekt.compiler.expressions.ir.IrRangeSlice.identifier","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-range-slice/identifier.html","searchKeys":["identifier","val identifier: String","io.github.subjekt.compiler.expressions.ir.IrRangeSlice.identifier"]},{"name":"val identityMapper: Mapper","description":"io.github.subjekt.identityMapper","location":"subjekt/io.github.subjekt/identity-mapper.html","searchKeys":["identityMapper","val identityMapper: Mapper","io.github.subjekt.identityMapper"]},{"name":"val indexExpression: IrNode","description":"io.github.subjekt.compiler.expressions.ir.IrSingleSlice.indexExpression","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-single-slice/index-expression.html","searchKeys":["indexExpression","val indexExpression: IrNode","io.github.subjekt.compiler.expressions.ir.IrSingleSlice.indexExpression"]},{"name":"val instances: Map<String, Instance>","description":"io.github.subjekt.core.resolution.ResolvedSubject.instances","location":"subjekt/io.github.subjekt.core.resolution/-resolved-subject/instances.html","searchKeys":["instances","val instances: Map<String, Instance>","io.github.subjekt.core.resolution.ResolvedSubject.instances"]},{"name":"val left: IrNode","description":"io.github.subjekt.compiler.expressions.ir.IrBinaryOperation.left","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-binary-operation/left.html","searchKeys":["left","val left: IrNode","io.github.subjekt.compiler.expressions.ir.IrBinaryOperation.left"]},{"name":"val line: Int","description":"io.github.subjekt.utils.MessageCollector.Position.line","location":"subjekt/io.github.subjekt.utils/-message-collector/-position/line.html","searchKeys":["line","val line: Int","io.github.subjekt.utils.MessageCollector.Position.line"]},{"name":"val lint: Boolean","description":"io.github.subjekt.core.Configuration.lint","location":"subjekt/io.github.subjekt.core/-configuration/lint.html","searchKeys":["lint","val lint: Boolean","io.github.subjekt.core.Configuration.lint"]},{"name":"val macroId: String","description":"io.github.subjekt.core.definition.DefinedMacro.macroId","location":"subjekt/io.github.subjekt.core.definition/-defined-macro/macro-id.html","searchKeys":["macroId","val macroId: String","io.github.subjekt.core.definition.DefinedMacro.macroId"]},{"name":"val macros: Map<String, Macro>","description":"io.github.subjekt.core.SymbolTable.macros","location":"subjekt/io.github.subjekt.core/-symbol-table/macros.html","searchKeys":["macros","val macros: Map<String, Macro>","io.github.subjekt.core.SymbolTable.macros"]},{"name":"val mapJsonExporter: Exporter<Map<String, String>, List<Map<String, String>>>","description":"io.github.subjekt.mapJsonExporter","location":"subjekt/io.github.subjekt/map-json-exporter.html","searchKeys":["mapJsonExporter","val mapJsonExporter: Exporter<Map<String, String>, List<Map<String, String>>>","io.github.subjekt.mapJsonExporter"]},{"name":"val message: String","description":"io.github.subjekt.utils.MessageCollector.Message.message","location":"subjekt/io.github.subjekt.utils/-message-collector/-message/message.html","searchKeys":["message","val message: String","io.github.subjekt.utils.MessageCollector.Message.message"]},{"name":"val messageCollector: MessageCollector","description":"io.github.subjekt.utils.Logger.messageCollector","location":"subjekt/io.github.subjekt.utils/-logger/message-collector.html","searchKeys":["messageCollector","val messageCollector: MessageCollector","io.github.subjekt.utils.Logger.messageCollector"]},{"name":"val name: Instance?","description":"io.github.subjekt.core.resolution.ResolvedSubject.name","location":"subjekt/io.github.subjekt.core.resolution/-resolved-subject/name.html","searchKeys":["name","val name: Instance?","io.github.subjekt.core.resolution.ResolvedSubject.name"]},{"name":"val name: Resolvable?","description":"io.github.subjekt.core.Subject.name","location":"subjekt/io.github.subjekt.core/-subject/name.html","searchKeys":["name","val name: Resolvable?","io.github.subjekt.core.Subject.name"]},{"name":"val node: IrNode","description":"io.github.subjekt.compiler.expressions.ir.IrTree.node","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-tree/node.html","searchKeys":["node","val node: IrNode","io.github.subjekt.compiler.expressions.ir.IrTree.node"]},{"name":"val node: IrNode?","description":"io.github.subjekt.compiler.expressions.InternalCompilerException.node","location":"subjekt/io.github.subjekt.compiler.expressions/-internal-compiler-exception/node.html","searchKeys":["node","val node: IrNode?","io.github.subjekt.compiler.expressions.InternalCompilerException.node"]},{"name":"val operand: IrNode","description":"io.github.subjekt.compiler.expressions.ir.IrUnaryOperation.operand","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-unary-operation/operand.html","searchKeys":["operand","val operand: IrNode","io.github.subjekt.compiler.expressions.ir.IrUnaryOperation.operand"]},{"name":"val operator: BinaryOperator","description":"io.github.subjekt.compiler.expressions.ir.IrBinaryOperation.operator","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-binary-operation/operator.html","searchKeys":["operator","val operator: BinaryOperator","io.github.subjekt.compiler.expressions.ir.IrBinaryOperation.operator"]},{"name":"val operator: UnaryOperator","description":"io.github.subjekt.compiler.expressions.ir.IrUnaryOperation.operator","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-unary-operation/operator.html","searchKeys":["operator","val operator: UnaryOperator","io.github.subjekt.compiler.expressions.ir.IrUnaryOperation.operator"]},{"name":"val origin: Resolvable","description":"io.github.subjekt.core.resolution.Instance.origin","location":"subjekt/io.github.subjekt.core.resolution/-instance/origin.html","searchKeys":["origin","val origin: Resolvable","io.github.subjekt.core.resolution.Instance.origin"]},{"name":"val originalParameter: Parameter? = null","description":"io.github.subjekt.core.definition.DefinedParameter.originalParameter","location":"subjekt/io.github.subjekt.core.definition/-defined-parameter/original-parameter.html","searchKeys":["originalParameter","val originalParameter: Parameter? = null","io.github.subjekt.core.definition.DefinedParameter.originalParameter"]},{"name":"val originalSuite: Suite","description":"io.github.subjekt.core.resolution.ResolvedSuite.originalSuite","location":"subjekt/io.github.subjekt.core.resolution/-resolved-suite/original-suite.html","searchKeys":["originalSuite","val originalSuite: Suite","io.github.subjekt.core.resolution.ResolvedSuite.originalSuite"]},{"name":"val originalSymbolTable: SymbolTable? = null","description":"io.github.subjekt.core.definition.Context.originalSymbolTable","location":"subjekt/io.github.subjekt.core.definition/-context/original-symbol-table.html","searchKeys":["originalSymbolTable","val originalSymbolTable: SymbolTable? = null","io.github.subjekt.core.definition.Context.originalSymbolTable"]},{"name":"val parameter: ParameterSymbol","description":"io.github.subjekt.compiler.expressions.SliceSymbol.parameter","location":"subjekt/io.github.subjekt.compiler.expressions/-slice-symbol/parameter.html","searchKeys":["parameter","val parameter: ParameterSymbol","io.github.subjekt.compiler.expressions.SliceSymbol.parameter"]},{"name":"val parameterId: String","description":"io.github.subjekt.core.definition.DefinedParameter.parameterId","location":"subjekt/io.github.subjekt.core.definition/-defined-parameter/parameter-id.html","searchKeys":["parameterId","val parameterId: String","io.github.subjekt.core.definition.DefinedParameter.parameterId"]},{"name":"val parameters: Map<String, Parameter>","description":"io.github.subjekt.core.SymbolTable.parameters","location":"subjekt/io.github.subjekt.core/-symbol-table/parameters.html","searchKeys":["parameters","val parameters: Map<String, Parameter>","io.github.subjekt.core.SymbolTable.parameters"]},{"name":"val path: String?","description":"io.github.subjekt.core.Module.path","location":"subjekt/io.github.subjekt.core/-module/path.html","searchKeys":["path","val path: String?","io.github.subjekt.core.Module.path"]},{"name":"val receiver: IrNode","description":"io.github.subjekt.compiler.expressions.QualifiedCallSymbol.receiver","location":"subjekt/io.github.subjekt.compiler.expressions/-qualified-call-symbol/receiver.html","searchKeys":["receiver","val receiver: IrNode","io.github.subjekt.compiler.expressions.QualifiedCallSymbol.receiver"]},{"name":"val receiver: IrNode","description":"io.github.subjekt.compiler.expressions.ir.IrDotCall.receiver","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-dot-call/receiver.html","searchKeys":["receiver","val receiver: IrNode","io.github.subjekt.compiler.expressions.ir.IrDotCall.receiver"]},{"name":"val resolvables: List<Resolvable>","description":"io.github.subjekt.core.Macro.resolvables","location":"subjekt/io.github.subjekt.core/-macro/resolvables.html","searchKeys":["resolvables","val resolvables: List<Resolvable>","io.github.subjekt.core.Macro.resolvables"]},{"name":"val resolvables: Map<String, Resolvable>","description":"io.github.subjekt.core.Subject.resolvables","location":"subjekt/io.github.subjekt.core/-subject/resolvables.html","searchKeys":["resolvables","val resolvables: Map<String, Resolvable>","io.github.subjekt.core.Subject.resolvables"]},{"name":"val resolvedSubjects: Set<ResolvedSubject>","description":"io.github.subjekt.core.resolution.ResolvedSuite.resolvedSubjects","location":"subjekt/io.github.subjekt.core.resolution/-resolved-suite/resolved-subjects.html","searchKeys":["resolvedSubjects","val resolvedSubjects: Set<ResolvedSubject>","io.github.subjekt.core.resolution.ResolvedSuite.resolvedSubjects"]},{"name":"val resolvedSuite: ResolvedSuite","description":"io.github.subjekt.core.resolution.SubjektResult.resolvedSuite","location":"subjekt/io.github.subjekt.core.resolution/-subjekt-result/resolved-suite.html","searchKeys":["resolvedSuite","val resolvedSuite: ResolvedSuite","io.github.subjekt.core.resolution.SubjektResult.resolvedSuite"]},{"name":"val resolvedSuite: ResolvedSuite?","description":"io.github.subjekt.AbstractSubjekt.resolvedSuite","location":"subjekt/io.github.subjekt/-abstract-subjekt/resolved-suite.html","searchKeys":["resolvedSuite","val resolvedSuite: ResolvedSuite?","io.github.subjekt.AbstractSubjekt.resolvedSuite"]},{"name":"val right: IrNode","description":"io.github.subjekt.compiler.expressions.ir.IrBinaryOperation.right","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-binary-operation/right.html","searchKeys":["right","val right: IrNode","io.github.subjekt.compiler.expressions.ir.IrBinaryOperation.right"]},{"name":"val safeNameResolverUniqueFallback: (ResolvedSubject) -> String","description":"io.github.subjekt.safeNameResolverUniqueFallback","location":"subjekt/io.github.subjekt/safe-name-resolver-unique-fallback.html","searchKeys":["safeNameResolverUniqueFallback","val safeNameResolverUniqueFallback: (ResolvedSubject) -> String","io.github.subjekt.safeNameResolverUniqueFallback"]},{"name":"val source: String","description":"io.github.subjekt.compiler.expressions.Expression.source","location":"subjekt/io.github.subjekt.compiler.expressions/-expression/source.html","searchKeys":["source","val source: String","io.github.subjekt.compiler.expressions.Expression.source"]},{"name":"val source: String","description":"io.github.subjekt.core.Resolvable.source","location":"subjekt/io.github.subjekt.core/-resolvable/source.html","searchKeys":["source","val source: String","io.github.subjekt.core.Resolvable.source"]},{"name":"val start: IrAtomicNode","description":"io.github.subjekt.compiler.expressions.ir.IrRangeSlice.start","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-range-slice/start.html","searchKeys":["start","val start: IrAtomicNode","io.github.subjekt.compiler.expressions.ir.IrRangeSlice.start"]},{"name":"val startIndex: Int = 0","description":"io.github.subjekt.compiler.expressions.SliceSymbol.startIndex","location":"subjekt/io.github.subjekt.compiler.expressions/-slice-symbol/start-index.html","searchKeys":["startIndex","val startIndex: Int = 0","io.github.subjekt.compiler.expressions.SliceSymbol.startIndex"]},{"name":"val stdLibFunctions: List<SubjektFunction>","description":"io.github.subjekt.stdLibFunctions","location":"subjekt/io.github.subjekt/std-lib-functions.html","searchKeys":["stdLibFunctions","val stdLibFunctions: List<SubjektFunction>","io.github.subjekt.stdLibFunctions"]},{"name":"val stdLibParameters: List<Parameter>","description":"io.github.subjekt.stdLibParameters","location":"subjekt/io.github.subjekt/std-lib-parameters.html","searchKeys":["stdLibParameters","val stdLibParameters: List<Parameter>","io.github.subjekt.stdLibParameters"]},{"name":"val step: IrAtomicNode","description":"io.github.subjekt.compiler.expressions.ir.IrRangeSlice.step","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-range-slice/step.html","searchKeys":["step","val step: IrAtomicNode","io.github.subjekt.compiler.expressions.ir.IrRangeSlice.step"]},{"name":"val stepIndex: Int = 1","description":"io.github.subjekt.compiler.expressions.SliceSymbol.stepIndex","location":"subjekt/io.github.subjekt.compiler.expressions/-slice-symbol/step-index.html","searchKeys":["stepIndex","val stepIndex: Int = 1","io.github.subjekt.compiler.expressions.SliceSymbol.stepIndex"]},{"name":"val subjectId: Int","description":"io.github.subjekt.core.resolution.ResolvedSubject.subjectId","location":"subjekt/io.github.subjekt.core.resolution/-resolved-subject/subject-id.html","searchKeys":["subjectId","val subjectId: Int","io.github.subjekt.core.resolution.ResolvedSubject.subjectId"]},{"name":"val subjects: List<Subject>","description":"io.github.subjekt.core.Suite.subjects","location":"subjekt/io.github.subjekt.core/-suite/subjects.html","searchKeys":["subjects","val subjects: List<Subject>","io.github.subjekt.core.Suite.subjects"]},{"name":"val suiteId: String","description":"io.github.subjekt.core.resolution.ResolvedSuite.suiteId","location":"subjekt/io.github.subjekt.core.resolution/-resolved-suite/suite-id.html","searchKeys":["suiteId","val suiteId: String","io.github.subjekt.core.resolution.ResolvedSuite.suiteId"]},{"name":"val symbolTable: SymbolTable","description":"io.github.subjekt.core.Module.symbolTable","location":"subjekt/io.github.subjekt.core/-module/symbol-table.html","searchKeys":["symbolTable","val symbolTable: SymbolTable","io.github.subjekt.core.Module.symbolTable"]},{"name":"val symbolTable: SymbolTable","description":"io.github.subjekt.core.Subject.symbolTable","location":"subjekt/io.github.subjekt.core/-subject/symbol-table.html","searchKeys":["symbolTable","val symbolTable: SymbolTable","io.github.subjekt.core.Subject.symbolTable"]},{"name":"val symbolTable: SymbolTable","description":"io.github.subjekt.core.Suite.symbolTable","location":"subjekt/io.github.subjekt.core/-suite/symbol-table.html","searchKeys":["symbolTable","val symbolTable: SymbolTable","io.github.subjekt.core.Suite.symbolTable"]},{"name":"val symbols: Set<ResolvableSymbol>","description":"io.github.subjekt.compiler.expressions.Expression.symbols","location":"subjekt/io.github.subjekt.compiler.expressions/-expression/symbols.html","searchKeys":["symbols","val symbols: Set<ResolvableSymbol>","io.github.subjekt.compiler.expressions.Expression.symbols"]},{"name":"val targetType: IrNativeType","description":"io.github.subjekt.compiler.expressions.ir.IrCast.targetType","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-cast/target-type.html","searchKeys":["targetType","val targetType: IrNativeType","io.github.subjekt.compiler.expressions.ir.IrCast.targetType"]},{"name":"val type: MessageCollector.MessageType","description":"io.github.subjekt.utils.MessageCollector.Message.type","location":"subjekt/io.github.subjekt.utils/-message-collector/-message/type.html","searchKeys":["type","val type: MessageCollector.MessageType","io.github.subjekt.utils.MessageCollector.Message.type"]},{"name":"val value: Double","description":"io.github.subjekt.compiler.expressions.ir.IrFloatLiteral.value","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-float-literal/value.html","searchKeys":["value","val value: Double","io.github.subjekt.compiler.expressions.ir.IrFloatLiteral.value"]},{"name":"val value: Int","description":"io.github.subjekt.compiler.expressions.ir.IrIntegerLiteral.value","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-integer-literal/value.html","searchKeys":["value","val value: Int","io.github.subjekt.compiler.expressions.ir.IrIntegerLiteral.value"]},{"name":"val value: Resolvable","description":"io.github.subjekt.core.definition.DefinedMacro.value","location":"subjekt/io.github.subjekt.core.definition/-defined-macro/value.html","searchKeys":["value","val value: Resolvable","io.github.subjekt.core.definition.DefinedMacro.value"]},{"name":"val value: String","description":"io.github.subjekt.compiler.expressions.ir.IrStringLiteral.value","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-string-literal/value.html","searchKeys":["value","val value: String","io.github.subjekt.compiler.expressions.ir.IrStringLiteral.value"]},{"name":"val value: String","description":"io.github.subjekt.core.definition.DefinedParameter.value","location":"subjekt/io.github.subjekt.core.definition/-defined-parameter/value.html","searchKeys":["value","val value: String","io.github.subjekt.core.definition.DefinedParameter.value"]},{"name":"val value: String","description":"io.github.subjekt.core.resolution.Instance.value","location":"subjekt/io.github.subjekt.core.resolution/-instance/value.html","searchKeys":["value","val value: String","io.github.subjekt.core.resolution.Instance.value"]},{"name":"val values: List<String>","description":"io.github.subjekt.core.Parameter.values","location":"subjekt/io.github.subjekt.core/-parameter/values.html","searchKeys":["values","val values: List<String>","io.github.subjekt.core.Parameter.values"]},{"name":"var showInConsole: Boolean","description":"io.github.subjekt.utils.Logger.showInConsole","location":"subjekt/io.github.subjekt.utils/-logger/show-in-console.html","searchKeys":["showInConsole","var showInConsole: Boolean","io.github.subjekt.utils.Logger.showInConsole"]},{"name":"var symbol: SliceSymbol?","description":"io.github.subjekt.compiler.expressions.ir.IrRangeSlice.symbol","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-range-slice/symbol.html","searchKeys":["symbol","var symbol: SliceSymbol?","io.github.subjekt.compiler.expressions.ir.IrRangeSlice.symbol"]},{"name":"var type: Type","description":"io.github.subjekt.compiler.expressions.ir.IrNode.type","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-node/type.html","searchKeys":["type","var type: Type","io.github.subjekt.compiler.expressions.ir.IrNode.type"]},{"name":"var value: IrNode?","description":"io.github.subjekt.compiler.expressions.ir.IrCast.value","location":"subjekt/io.github.subjekt.compiler.expressions.ir/-ir-cast/value.html","searchKeys":["value","var value: IrNode?","io.github.subjekt.compiler.expressions.ir.IrCast.value"]}]