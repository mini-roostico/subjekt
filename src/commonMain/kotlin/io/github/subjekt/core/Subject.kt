/*
 * Copyright (c) 2024, Francesco Magnani, Luca Rubboli,
 * and all authors listed in the `build.gradle.kts` and the generated `pom.xml` file.
 *
 *  This file is part of Subjekt, and is distributed under the terms of the Apache License 2.0, as described in the
 *  LICENSE file in this project's repository's top directory.
 *
 */

package io.github.subjekt.core

import io.github.subjekt.core.parsing.SuiteFactory

/**
 * Represents a Subject in a Suite.
 */
data class Subject(
    /**
     * The unique identifier of the Subject. This is used to reference the Subject in the Suite.
     *
     * *Note*: this is different from the "name" of the Subject, that can be used to distinguish
     * [io.github.subjekt.core.resolution.ResolvedSubject]s
     *
     * *Note*: this is not configurable. It is generated by the parser.
     */
    val id: Int,
    /**
     * Fields of the Subject. Each field is a [Resolvable] object that can be resolved to a value.
     */
    val fields: Map<String, Resolvable>,
    /**
     * Optional local symbol table available only to this Subject. Empty by default.
     */
    val symbolTable: SymbolTable = SymbolTable(),
) {
    companion object {
        /**
         * The default field name for a Subject, useful when a Subject has only one field and can therefore be created
         * by a simple string.
         */
        const val DEFAULT_FIELD_NAME = "default"

        /**
         * The keys that can be used to give a name to the subject. This is **NOT** the same as the [id], which is
         * automatically generated by the parser and cannot be configured.
         */
        val SUBJECT_NAME_KEYS = setOf("name", "id", "identifier", "title")

        /**
         * The default key used to give a name to the subject.
         */
        const val DEFAULT_NAME_KEY = "name"

        /**
         * Creates a [Subject] with a single field named [DEFAULT_FIELD_NAME], or [fieldName] if specified,
         * containing [content].
         */
        internal fun SuiteFactory.SuiteBuilder.createAndAddSubjectFromString(
            content: String,
            fieldName: String = DEFAULT_FIELD_NAME,
        ): SuiteFactory.SuiteBuilder {
            val subject = Subject(getFreshSubjectId(), mapOf(fieldName to TODO()))
            return subject(subject)
        }
    }
}
